import Proton from 'proton-engine';
import RAFManager from 'raf-manager';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var PMap = function () {
  function PMap() {
    classCallCheck(this, PMap);

    this.list = [];
  }

  createClass(PMap, [{
    key: "add",
    value: function add(data) {
      this.list.push(data);
    }
  }, {
    key: "map",
    value: function map(callback) {
      for (var i = 0; i < this.list.length; i++) {
        var m = this.list[i];
        callback(m);
      }
    }
  }, {
    key: "findByNode",
    value: function findByNode(node) {
      for (var i = 0; i < this.list.length; i++) {
        var m = this.list[i];
        if (m["node"] === node) {
          return m;
        }
      }

      return null;
    }
  }, {
    key: "removeByNode",
    value: function removeByNode(node) {
      for (var i = 0; i < this.list.length; i++) {
        var m = this.list[i];
        if (m["node"] === node) {
          this.list.splice(i, 1);
          break;
        }
      }
    }
  }, {
    key: "removeByEmitter",
    value: function removeByEmitter(emitter) {
      for (var i = 0; i < this.list.length; i++) {
        var m = this.list[i];
        if (m["emitter"] === emitter) {
          this.list.splice(i, 1);
          break;
        }
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      for (var i = 0; i < this.list.length; i++) {
        var m = this.list[i];
        for (var key in m) {
          delete m[key];
        }
      }

      this.list.length = 0;
    }
  }]);
  return PMap;
}();

var container = void 0,
    proton = void 0;
var piMap = new PMap();

var PowerModeInput = {
  container: null,
  make: function make(node) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (typeof node === "string") node = document.querySelector(node);
    if (!container) container = createContainer();

    if (!proton) {
      proton = new Proton();
      proton.addRenderer(createProtonRenderer(container, config));
      RAFManager.add(renderProton);
    }

    var emitter = createEmitter(node, config);
    proton.addEmitter(emitter);
    addPowerEvent(node);
    piMap.add({ emitter: emitter, node: node, config: config });

    return this;
  },
  close: function close(node) {
    if (typeof node === "string") node = document.querySelector(node);

    var _piMap$findByNode = piMap.findByNode(node),
        emitter = _piMap$findByNode.emitter;

    proton.removeEmitter(emitter);
    piMap.removeByNode(node);
    removePowerEvent(node);
    return this;
  },
  destroy: function destroy() {
    try {
      piMap.map(function (_ref) {
        var node = _ref.node;
        return removePowerEvent(node);
      });
      piMap.destroy();
      RAFManager.remove(renderProton);
      proton.destroy();
    } catch (e) {}
    return this;
  }
};

// ~~~~~~~~~~~ PROTON FUNCTION ~~~~~~~~~~~ //
var createEmitter = function createEmitter(node) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var emitter = new Proton.Emitter();
  emitter.rate = config.num ? new Proton.Rate(Proton.getSpan(Math.floor(config.num * 0.7), config.num), 0.1) : new Proton.Rate(Proton.getSpan(6, 8), 0.1);

  var life = config.life ? new Proton.Life(config.life) : new Proton.Life(0.5, 1.2);
  var color = config.color || getDefaultColor(node);
  var tha = config.tha ? new Proton.Span(config.tha[0], config.tha[1]) : new Proton.Span(-30, 30);
  var v = config.v ? new Proton.Span(config.v * 0.8, config.v) : new Proton.Span(0.6, 1.2);

  if (config.alpha) {
    if (Array.isArray(config.alpha)) {
      emitter.addBehaviour(new Proton.Alpha(config.alpha[0], config.alpha[1]));
    } else {
      emitter.addBehaviour(new Proton.Alpha(config.alpha));
    }
  } else {
    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.6, 0.9)));
  }

  if (config.radius) {
    var r = config.radius;
    var radius = new Proton.Radius(r * 0.5, r);
    emitter.addInitialize(radius);
  } else {
    var _radius = new Proton.Radius(1, 2);
    emitter.addInitialize(_radius);
  }

  var g = config.g || 2.5;

  if (config.random) {
    emitter.addBehaviour(new Proton.RandomDrift(config.random, config.random, 0.2));
  }

  emitter.addInitialize(new Proton.Mass(1));
  emitter.addInitialize(life);
  emitter.addInitialize(new Proton.Velocity(v, tha, "polar"));
  emitter.addBehaviour(new Proton.Color(color));
  emitter.addBehaviour(new Proton.Scale(1, 0.5));
  emitter.addBehaviour(new Proton.G(parseFloat(g)));
  return emitter;
};

var createProtonRenderer = function createProtonRenderer(container, config) {
  var renderer = new Proton.DomRenderer(container);

  renderer.onParticleCreated = function (particle) {
    var body = renderer.pool.get(renderer.circleConf, particle);
    body.style.width = 2 * particle.radius + "px";
    body.style.height = 2 * particle.radius + "px";
    body.style.marginLeft = -particle.radius + "px";
    body.style.marginTop = -particle.radius + "px";

    body.style.borderRadius = 0;
    renderer.element.appendChild(body);
    particle.body = body;
  };

  return renderer;
};

var renderProton = function renderProton() {
  proton && proton.update();
};

// ~~~~~~~~~~~ UTILS FUNCTION ~~~~~~~~~~~ //
var addPowerEvent = function addPowerEvent(node) {
  node.addEventListener("input", inputHandler, false);
};

var removePowerEvent = function removePowerEvent(node) {
  try {
    node.removeEventListener("input", inputHandler, false);
    node.onpropertychange = null;
  } catch (e) {}
};

var inputHandler = function inputHandler(e) {
  var _piMap$findByNode2 = piMap.findByNode(e.currentTarget || e.target),
      emitter = _piMap$findByNode2.emitter,
      config = _piMap$findByNode2.config;

  var pos = getCursorPosition(e);
  emitter.p.x = pos.x;
  emitter.p.y = pos.y + (config.height || config.y || 0);
  emitter.emit("once");
};

// ~~~~~~~~~~~ DOCUMENT FUNCTION ~~~~~~~~~~~ //
var createContainer = function createContainer() {
  var container = document.createElement("div");
  container.style.position = "fixed";
  container.style.left = "0px";
  container.style.top = "0px";
  container.style.zIndex = 9999;
  container.pointerEvents = "none";
  container.id = "powerinput_" + (Math.random() * 999999 >> 0);
  document.body.appendChild(container);

  return container;
};

var getDefaultColor = function getDefaultColor(node) {
  var color = node.style.color;
  if (color && color !== "inherit") ; else {
    var copyStyle = getComputedStyle(node);
    color = copyStyle["color"];

    if (color && color !== "inherit") ; else {
      color = "#000000";
    }
  }

  if (color.indexOf("rgb") === 0) {
    color = rgbToHex(color);
  }
  return color;
};

var rgbToHex = function rgbToHex(c) {
  var rgb = c.replace(/^(rgb|rgba)\(/, "").replace(/\)$/, "").replace(/\s/g, "").split(",");

  var r = +rgb[0];
  var g = +rgb[1];
  var b = +rgb[2];

  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
};

var getCursorXY = function getCursorXY(input, selectionPoint) {
  var con = document.createElement("div");
  con.style.position = "absolute";
  con.style.zIndex = -99;
  con.style.visibility = "hidden";

  var div = document.createElement("div");
  var copyStyle = getComputedStyle(input);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = copyStyle[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var prop = _step.value;

      div.style[prop] = copyStyle[prop];
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var swap = ".";
  var inputValue = input.tagName === "INPUT" ? input.value.replace(/ /g, swap) : input.value;
  // set the div content to that of the textarea up until selection
  var textContent = inputValue.substr(0, selectionPoint);
  div.textContent = textContent;
  if (input.tagName === "TEXTAREA") div.style.height = "auto";
  if (input.tagName === "INPUT") div.style.width = "auto";

  // create a marker element to obtain caret position
  var span = document.createElement("span");
  span.textContent = inputValue.substr(selectionPoint) || ".";
  span.style.backgroundColor = "#ff0000";
  div.appendChild(span);
  con.appendChild(div);
  document.body.appendChild(con);

  var spanX = span.offsetLeft,
      spanY = span.offsetTop;
  //const rect = span.getBoundingClientRect();

  var pos = getGlobalPosition(input);
  document.body.removeChild(con);

  return {
    x: pos.x + spanX,
    y: pos.y + spanY
  };
};

var getGlobalPosition = function getGlobalPosition(element) {
  var x = 0;
  var y = 0;
  while (element) {
    x += element.offsetLeft - element.scrollLeft + element.clientLeft;
    y += element.offsetTop - element.scrollTop + element.clientTop;
    element = element.offsetParent;
  }

  return { x: x, y: y };
};

var getCursorPosition = function getCursorPosition(e) {
  var input = e.currentTarget;

  var _getSelection = getSelection(input),
      end = _getSelection.end;

  return getCursorXY(input, end);
};

var getSelection = function getSelection(el) {
  var start = 0,
      end = 0,
      normalizedValue = void 0,
      range = void 0,
      textInputRange = void 0,
      len = void 0,
      endRange = void 0;

  if (typeof el.selectionStart === "number" && typeof el.selectionEnd === "number") {
    start = el.selectionStart;
    end = el.selectionEnd;
  } else if (document.selection) {
    range = document.selection.createRange();

    if (range && range.parentElement() == el) {
      len = el.value.length;
      normalizedValue = el.value.replace(/\r\n/g, "\n");
      textInputRange = el.createTextRange();
      textInputRange.moveToBookmark(range.getBookmark());
      endRange = el.createTextRange();
      endRange.collapse(false);

      if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
        start = end = len;
      } else {
        start = -textInputRange.moveStart("character", -len);
        start += normalizedValue.slice(0, start).split("\n").length - 1;

        if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
          end = len;
        } else {
          end = -textInputRange.moveEnd("character", -len);
          end += normalizedValue.slice(0, end).split("\n").length - 1;
        }
      }
    }
  } else {
    start = end = el.value.length;
  }

  return { start: start, end: end };
};

export default PowerModeInput;
//# sourceMappingURL=index.es.js.map
