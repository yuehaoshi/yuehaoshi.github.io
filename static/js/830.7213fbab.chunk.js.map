{"version":3,"file":"static/js/830.7213fbab.chunk.js","mappings":";oIAAA,IAAMA,EAAK,UAGLC,EAAW,CAAAD,GACXA,EAAAA,KACO,EAALA,EAAAA,KACAA,EAAK,EAAAE,OACHF,EAAK,IAAAG,QACJ,IAAMH,EAAAA,UACJ,IAAAI,WAAAA,SAEAC,GAAAA,OACFA,IAAQC,KAAKC,UAAYF,IAXnBE,EAAAA,GAAAA,WAAAA,SAcJC,EAAGC,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,aAAAA,IAAAA,GAAAA,EAEAC,KAAKC,MAAMD,KAAKE,UAAYH,EAAID,IAAMA,EAD/BA,EAAIE,KAAKE,UAAYH,EAAID,IAAAA,eAAAA,SAI/BK,EAAQC,EAAGC,GAAAA,OACjBT,KAAKU,WAAWH,EAASC,EAAGD,EAASC,EAAGC,IAAAA,YAAAA,WAAAA,MAK7C,KACC,SAA4B,SAAhBL,KAAKE,UAAyB,GAAGK,SAAS,KAAKC,OAAO,IAAAC,WAAAA,aAAAR,MAAAA,SAMjEN,EAAAA,GACwBe,OADnBA,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAI,EACPC,EAASX,KAAKY,IAAI,GAAIF,GACrBV,KAAKC,MAAMN,EAAMgB,GAAUA,GAAAA,gBAAAA,SAGpBb,GAAAA,OACNA,EAAIR,EAAM,KAAAuB,UAAAA,SAGVlB,GAAAA,MAAAA,IACGA,EAAIY,SAAS,MAAAO,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAA,kIAAAC,EAAAA,SAAAA,EAAAA,GAAA,+EAAAC,EAAAA,SAAAA,EAAAA,EAAAA,GAAA,+FAAAlB,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAA,8IAAAA,EAAAA,EAAAA,KAAA,oNAAAkB,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAC,YAAAA,CAAAC,MAAAA,EAAAC,YAAAA,EAAAC,UAAAA,EAAAC,cAAAA,KAAA,yOCxCPC,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAAAA,GAaVjB,OAAAA,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,GAAAA,EACHT,KAAK2B,QACAC,EAAKC,iBAAiB7B,KAAKE,GAE7BF,KAAKO,OAGDZ,EAASmC,eAAe9B,KAAKE,EAAGF,KAAKG,EAAGM,GAFxCd,EAASe,WAAWV,KAAKE,EAAGF,KAAKG,EAAGM,MAAAA,CAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAqB7BP,EAAGC,EAAG4B,GAAAA,OACpB7B,aAAawB,EACRxB,OAAAA,IAEHC,EACK,IAAIuB,EAAKxB,QAAAA,IAEZ6B,EAAwB,IAAIL,EAAKxB,EAAGC,GAC5B,IAAIuB,EAAKxB,EAAGC,EAAG4B,KAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAebC,GAAAA,OACXA,aAAeN,EAAOM,EAAIC,WAAaD,MAAAA,GAAAA,SAAAA,EA9DpC9B,EAAGC,EAAGI,GAAAA,EAAAA,KAAAA,GACZqB,EAAKD,QAAQzB,IAAAA,KACVyB,SAAAA,EAAU,KACVzB,EAAIA,IAAAA,KAEJyB,SAAAA,EAAU,KACVzB,EAAI0B,EAAKM,UAAUhC,EAAG,QACtBC,EAAIyB,EAAKM,UAAU/B,EAAGH,KAAKE,GAAAA,KAC3BK,OAASqB,EAAKM,UAAU3B,GAAAA,ICZnC,eA2BQ4B,KACFA,EAAAA,IACG,IAAIjB,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAAAE,GACTe,GAAUjB,EAAAA,OAGxBiB,EAAS,GAAAC,EAAAA,SAgBFC,EAAIC,GAAAA,MACX,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGD,EAAIC,EAAI,IAAAC,EAAAA,SAcvBC,GAAAA,IACPT,EAAI3B,KAAKqC,IAAID,GACAA,MAEV,CAACT,IAFJW,EAAItC,KAAKuC,IAAIH,IAEF,EAAGE,EAAGX,EAAG,EAAG,EAAG,EAAG,IAAAa,EAAAA,SAgBzBC,EAAIC,GAAAA,MACL,CAACD,EAAI,EAAG,EAAG,EAAGC,EAAI,EAAG,EAAG,EAAG,IAAAtC,EAAAA,SAgBrBN,EAAGC,GAAAA,IACZ4C,EAAM7C,EAAE,GACR8C,EAAM9C,EAAE,GACR+C,EAAM/C,EAAE,GACRgD,EAAMhD,EAAE,GACRiD,EAAMjD,EAAE,GACRkD,EAAMlD,EAAE,GACRmD,EAAMnD,EAAE,GACRoD,EAAMpD,EAAE,GACRqD,EAAMrD,EAAE,GACRsD,EAAMrD,EAAE,GACRsD,EAAMtD,EAAE,GACRuD,EAAMvD,EAAE,GACRwD,EAAMxD,EAAE,GACRyD,EAAMzD,EAAE,GACR0D,EAAM1D,EAAE,GACR2D,EAAM3D,EAAE,GAEA,MAEL,CACL4C,EAAMS,EAAMR,EAAMW,EAAMV,EAAMa,EAC9Bf,EAAMU,EAAMT,EAAMY,EAAMX,GALtBc,EAAM5D,EAAE,IAMV4C,EAAMW,EAAMV,EAAMa,EAAMZ,GALtBe,EAAM7D,EAAE,IAMV+C,EAAMM,EAAML,EAAMQ,EAAMP,EAAMU,EAC9BZ,EAAMO,EAAMN,EAAMS,EAAMR,EAAMW,EAC9Bb,EAAMQ,EAAMP,EAAMU,EAAMT,EAAMY,EAC9BX,EAAMG,EAAMF,EAAMK,EAAMJ,EAAMO,EAC9BT,EAAMI,EAAMH,EAAMM,EAAML,EAAMQ,EAC9BV,EAAMK,EAAMJ,EAAMO,EAAMN,EAAMS,IAAAA,EClIrB,CAAAC,aAAAA,SAcAC,EAAIC,EAAOC,EAAAA,GAAAA,IAAQC,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAW,WACN,OAA7BC,EAAMC,SAASC,cAAc,WAE/BN,GAAKA,EAAAA,EACLC,MAAQA,EAAAA,EACRC,OAASA,EAAAA,EACTK,MAAMC,QAAU,EAAAxE,EAChBuE,MAAMJ,SAAWA,EAAAA,KAChBM,UAAUL,GAAM,KAAM,IAAK,EAAG,GAE5BA,GAAAA,UAAAA,SAGCJ,EAAIC,EAAOC,GAAAA,IACbE,EAAMC,SAASC,cAAc,gBAE/BN,GAAKA,EAAAA,EACLO,MAAMJ,SAAW,gBAChBO,OAAON,EAAKH,EAAOC,GAEjBE,GAAAA,OAAAA,SAGFA,EAAKH,EAAOC,GAAAA,EACbK,MAAMN,MAAQA,EAAQ,KAAA/C,EACtBqD,MAAML,OAASA,EAAS,KAAAhD,EACxBqD,MAAMI,YAAcV,EAAQ,EAAI,KAAA/C,EAChCqD,MAAMK,WAAaV,EAAS,EAAI,MAAAO,UAAAA,SAe5BI,EAAKC,EAAGzC,EAAG0C,EAAOC,GAAAA,EACtBT,MAAMU,WAAa,gBACjBR,EAAAA,aAAyBK,EAAAA,OAAQzC,EAAAA,aAAc0C,EAAAA,YAAiBC,EAAAA,OAAAA,KACjEE,KAAKL,EAAK,YAAaJ,IAAAA,YAAAA,SAGlBI,EAAKC,EAAGzC,EAAG0C,EAAOC,GAAAA,EACxBT,MAAMU,WAAa,YACjBR,EAAAA,eAA2BK,EAAAA,OAAQzC,EAAAA,gBAAiB0C,EAAAA,YAAiBC,EAAAA,OAAAA,KACtEE,KAAKL,EAAK,qBAAsB,eAChCK,KAAKL,EAAK,YAAaJ,IAAAA,KAAAA,SAGzBI,EAAKM,EAAKC,GAAAA,IACPC,EAAOF,EAAIG,OAAO,GAAGC,cAAgBJ,EAAIK,OAAO,GAAAtE,EAElDqD,MAAAA,SAAec,GAAUD,EAAAA,EACzBb,MAAAA,MAAYc,GAAUD,EAAAA,EACtBb,MAAAA,IAAUc,GAAUD,EAAAA,EACpBb,MAAAA,KAAWc,GAAUD,EAAAA,EACrBb,MAAAA,GAASY,GAASC,ICzEpBK,EAAY,GACZC,EAAc,GAChBC,EAAW,EAAAC,EAAAA,SAaAC,EAASC,EAAOC,GAMpB7B,OANoB6B,EACnBC,UAAUF,EAAOC,EAAKjB,EAAGiB,EAAK1D,GAChC4D,EAAYJ,EAAQK,aACxBH,EAAKjB,EACLiB,EAAK1D,EACL0D,EAAK9B,MACL8B,EAAK7B,QAAAA,EAECiC,UAAUJ,EAAKjB,EAAGiB,EAAK1D,EAAG0D,EAAK9B,MAAO8B,EAAK7B,QAE5C+B,GAAAA,EAAAA,SAeOG,EAAKC,EAAUC,GAAAA,IACvBC,EAAqB,iBAARH,EAAmBA,EAAMA,EAAIG,IAE5Cd,EAAUc,GAAAA,EACHd,EAAUc,GAAMD,KAEnBR,EAAQ,IAAIU,OACZC,OAAS,YAAAC,EACHH,GAAOI,EAAEC,OAAAA,EACVnB,EAAUc,GAAMD,IAAAA,EAGrBC,IAAMA,IAAAA,EAAAA,SAIGH,EAAKC,EAAUC,GAAAA,IAIxBrC,EAGA4C,EANFN,EAAMH,EAAIG,IAAAA,OAEXb,EAAYa,KACTtC,EAAQ6C,EAAgBV,EAAInC,OAC5BC,EAAS4C,EAAgBV,EAAIlC,SAE7B2C,EAASE,EAAQhD,aAAAA,0BACI4B,EACzB1B,EACAC,IAEqB8C,WAAW,MAC1BhB,UAAUI,EAAK,EAAG,EAAGA,EAAInC,MAAOmC,EAAIlC,QAAAA,EAEhCqC,GAAOM,GAAAA,GAGTR,EAASX,EAAYa,GAAMD,GAEhCZ,EAAYa,IAAAA,EC5ER,CAAAvE,UAAAA,SAUHZ,EAAO6F,GAAAA,OACP7F,MAAAA,EAAwCA,EAAQ6F,GAAAA,QAAAA,SAclD7F,GAAAA,MAC2C,mBAA1C8F,OAAOC,UAAU1G,SAAS2G,KAAKhG,IAAAA,WAAAA,SAW7BiG,GACLA,IAAKA,EAAIpF,OAAS,IAAAqF,QAAAA,SAGhBD,GAAAA,OACCvH,KAAK2B,QAAQ4F,GAAOA,EAAM,CAACA,IAAAA,iBAAAA,SAGnBA,GAAAA,OACVA,EACEA,EAAInH,KAAKC,MAAMkH,EAAIpF,OAAS/B,KAAKE,WADvB,MAAAmH,YAAAA,SAYPC,EAAAA,GAAAA,IACDrC,EADMsC,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAS,SACftC,KAAOqC,EACVC,IAAiC,EAAvBA,EAAOC,QAAQvC,WACtBqC,EAAIrC,IAAAA,WAAAA,SAeJhE,EAAAA,GAAoB,OAQpB,KARawG,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAO,MAIPxG,EAAYyG,KAAKC,MACnC1G,EACA,CAAC,MAAM2G,OAAOH,IAJLxG,IAAAA,aAAAA,SAqBF4G,EAAAA,IAAUC,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAO,QAGxBlI,KAAKmI,QAAQD,EAAM,OAAMD,EAASrF,EAAEoC,EAAIkD,EAAAA,GACxClI,KAAKmI,QAAQD,EAAM,OAAMD,EAASrF,EAAEL,EAAI2F,EAAAA,GAExClI,KAAKmI,QAAQD,EAAM,QAAOD,EAASG,EAAEpD,EAAIkD,EAAAA,IACzClI,KAAKmI,QAAQD,EAAM,QAAOD,EAASG,EAAE7F,EAAI2F,EAAAA,IAEzClI,KAAKmI,QAAQD,EAAM,QAAOD,EAAS/H,EAAE8E,EAAIkD,EAAAA,IACzClI,KAAKmI,QAAQD,EAAM,QAAOD,EAAS/H,EAAEqC,EAAI2F,EAAAA,IAEzClI,KAAKmI,QAAQD,EAAM,MAAMD,EAASrF,EAAEyF,KAAKH,EAAAA,GACzClI,KAAKmI,QAAQD,EAAM,MAAMD,EAASG,EAAEC,KAAKH,EAAAA,GACzClI,KAAKmI,QAAQD,EAAM,MAAMD,EAAS/H,EAAEmI,KAAKH,EAAAA,GAEzClI,KAAKmI,QAAQD,EAAM,aAAaD,EAASrF,EAAEyF,KAAKH,EAAAA,UAChDlI,KAAKmI,QAAQD,EAAM,aAAaD,EAASG,EAAEC,KAAKH,EAAAA,UAChDlI,KAAKmI,QAAQD,EAAM,eAAeD,EAAS/H,EAAEmI,KAAKH,EAAAA,cAAAC,QAAAA,SAGhDrB,EAAQzB,GAAAA,QACTyB,QAAAA,IACEA,EAAOzB,IAAAA,QAAAA,SAkBRyB,EAAQwB,GAAAA,IACT,IAAIC,KAAQD,EACXxB,EAAO0B,eAAeD,KAAAA,EACjBA,GAAQ7G,EAAK+G,aAAaH,EAAMC,KAAAA,OAIpCzB,GAAAA,aAAAA,SAaIf,EAASC,EAAOC,GAAAA,OACpByC,EAAqB3C,EAASC,EAAOC,IAAAA,WAAAA,SAGnCsB,EAAAA,GAAAA,IAAAA,IAAKf,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAQ,KAClBtF,EAAIqG,EAAIpF,OAELjB,KAAK,KAAAE,EAEJF,GAAGyH,QAAQnC,GACf,MAAOK,WAEFU,EAAIrG,GAAAA,EAGTiB,OAAS,GAAAyG,OAAAA,SAGR9B,EAAQ+B,GAAAA,GACgB,mBAAlBzB,OAAOwB,OAAAA,OASTxB,OAAOwB,OAAO9B,EAAQ+B,GAAAA,IARxB,IAAIxD,KAAOwD,EACVzB,OAAOC,UAAUmB,eAAelB,KAAKuB,EAAQxD,KAAAA,EACxCA,GAAOwD,EAAOxD,IAAAA,OAIlByB,IC7LPgC,EAAS,GAETC,EAAO,CAAAC,OACH,EAAAC,OACA,GAAA/E,GAAAA,SAELgF,GAAAA,YAAAA,IACGJ,EAAOI,IAAwC,OAAjBJ,EAAOI,KAAgBJ,EAAOI,GAAQ,GAC9DA,EAAAA,IAAQJ,EAAOI,MAAAA,MAAAA,SAGrBpC,GAAAA,IACAqC,EAAMnJ,KAAKoJ,eAAetC,GAAAA,OAC1BqC,IAAAA,EAAAA,QAEUnJ,KAAKgJ,SAAAA,KACdC,OAAOE,GAAOrC,EAEZqC,IAAAA,eAAAA,SAGMrC,GAAAA,IACTY,EAAKxD,OAAAA,EAAAA,IAEJA,KAAMlE,KAAKiJ,OAAQ,OAChBjJ,KAAKiJ,OAAO/E,MAEN4C,EAAQ,OAAO5C,EAAAA,GACvBlE,KAAKqJ,OAAO3B,EAAKZ,IAAWY,EAAIjB,MAAQK,EAAOL,IAAK,OAAOvC,EAAAA,OAG1D,MAAAmF,OAAAA,SAGF3B,EAAKZ,GAAAA,MAEO,qBAARY,EAAAA,YAAAA,EAAAA,KACW,qBAAXZ,EAAAA,YAAAA,EAAAA,KACPY,EAAI4B,SACJxC,EAAOwC,SAAAA,UAAAA,SAIDH,GAAAA,OACDnJ,KAAKiJ,OAAOE,KCzBFI,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SA4BfzC,EAAQ0C,EAAQL,GAAAA,IACdvG,OAAAA,EAAAA,OAAAA,EACEuG,GAAOrC,EAAO2C,QAAUV,EAAKW,MAAM5C,IAAAA,EAErC9G,KAAK2J,MAAMR,IAAiC,EAAzBnJ,KAAK2J,MAAMR,GAAKhH,OACjCnC,KAAK2J,MAAMR,GAAKS,MAEhB5J,KAAK6J,cAAc/C,EAAQ0C,IAG/BC,OAAS3C,EAAO2C,QAAUN,EACrBvG,IAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAaFkE,GAAAA,OACE9G,KAAK8J,SAAShD,EAAO2C,QAAQM,KAAKjD,KAAAA,CAAAA,IAAAA,gBAAAA,MAAAA,SAgB7BA,EAAQ0C,GAAAA,OAAAA,KACfQ,QAEDhK,KAAKiK,OACAjK,KAAKiK,OAAOnD,EAAQ0C,GACA,mBAAX1C,EACTlF,EAAKsI,WAAWpD,EAAQ0C,GAExB1C,EAAOqD,UAAAA,CAAAA,IAAAA,WAAAA,MAAAA,WAAAA,IAcPjG,EADLkG,EAAQ,MACHlG,KAAMlE,KAAK2J,MAAAA,GAAgB3J,KAAK2J,MAAMzF,GAAI/B,OACnD,OAAOiI,MAAAA,CAAAA,IAAAA,UAAAA,MAAAA,WAAAA,IAUF,IAAIlG,KAAMlE,KAAK2J,MAAAA,KACbA,MAAMzF,GAAI/B,OAAS,SACjBnC,KAAK2J,MAAMzF,KAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAAAA,GAeP,OAANiF,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAM,UACRnJ,KAAK2J,MAAMR,KAAMnJ,KAAK2J,MAAMR,GAAO,IACjCnJ,KAAK2J,MAAMR,OAAAA,GAAAA,SAAAA,EA7GRpJ,GAAAA,EAAAA,KAAAA,GAAAA,KACLiK,MAAQ,OACRL,MAAQ,OCjCIU,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAUZ5F,EAAO6F,GAAAA,KACPC,IAAI9F,EAAO6F,GAAAA,IAEVE,EAAUxK,KAAKyK,aAEX,OADJC,EAAW1K,KAAK2K,cAClBC,EAAM,GAEF5K,KAAKkJ,MAAAA,KACN,EAAArC,GACI,WAAa7G,KAAK6K,OAAOC,SAAS3I,OAAS,OAC9CqI,IAASI,GAAO,YAAcJ,EAAQO,UAAY,QAClDP,IAASI,GAAO,OAAS5K,KAAKgL,cAAcR,IAAAA,MAAAA,KAG7C,EACCA,IACFI,GAAO,eAAiBJ,EAAQS,YAAY9I,OAAS,QACnDqI,IACFI,GACE,uCACA5K,KAAKkL,UAAUV,EAAQS,aACvB,eACAT,IAASI,GAAO,cAAgBJ,EAAQW,WAAWhJ,OAAS,QAC5DqI,IACFI,GACE,uCACA5K,KAAKkL,UAAUV,EAAQW,YACvB,0BAGD,EACCT,IAAUE,GAAOF,EAASU,KAAO,QACjCV,IAAUE,GAAO,QAAU5K,KAAKqL,iBAAiBX,GAAY,sBAAA7D,GAI1D,aAAe7G,KAAK6K,OAAOS,WAAa,OAAAzE,GACxC,QAAU7G,KAAK6K,OAAOU,KAAKD,WAAa,OAAAzE,GACxC,SAAW7G,KAAK6K,OAAOU,KAAKvB,MAAAA,KAGlCwB,UAAUC,UAAYb,IAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SAGzBnG,EAAO6F,GAAAA,IAAAA,EAAAA,KAAAA,IACJtK,KAAKwL,UAAW,MACdtC,KAAO,OAEPsC,UAAYjH,SAASC,cAAc,YACnCgH,UAAU/G,MAAMiH,QAAU,CAC7B,sDACA,gGACA,6DACAC,KAAK,SAEFH,UAAUI,iBACb,SACA,YAAA1K,EACOgI,OACW,EAAZ2C,EAAK3C,OAAU2C,EAAK3C,KAAO,SAEjC,IAGE4C,OAAAA,EAAIC,OAAAA,EAAAA,OACAtH,GAAAA,KACD,EAAAvE,EACE,OAAA8L,EACG,kBAGL,EAAA9L,EACE,OAAA8L,EACG,qBAAA9L,EAIH,OAAA8L,EACG,YAGPR,UAAU/G,MAAM,oBAAsBqH,EAAAA,KACtCN,UAAU/G,MAAfsH,MAAgCA,EAG7B/L,KAAKwL,UAAUS,aAAAA,EACX3B,GAAQtK,KAAKsK,MAAQ/F,SAAS+F,MAChC4B,YAAYlM,KAAKwL,aAAAA,CAAAA,IAAAA,aAAAA,MAAAA,WAAAA,OAKjBxL,KAAK6K,OAAOC,SAAS9K,KAAKmM,gBAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,OAI1BnM,KAAK6K,OAAOuB,UAAUpM,KAAKqM,iBAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAG1B9E,GAAAA,IACJ+E,EAAS,OACR/E,IAAQA,EAAIpF,OAAQ,OAAOmK,EAAAA,IAE3B,IAAIpL,EAAI,EAAGA,EAAIqG,EAAIpF,OAAQjB,IAAAA,IACnBqG,EAAIrG,GAAGkK,MAAQ,IAAI1F,OAAO,EAAG,GAAK,WAGxC4G,IAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAGQ5B,GAAAA,OACRA,EAASa,KAAKvB,OAAUU,EAAS6B,OAAS7B,EAAS6B,MAAMvC,OAAU,KAAA3E,IAAAA,gBAAA/D,MAAAA,SAG9DuF,GAAAA,OACLzG,KAAKoM,MAAM3F,EAAEjE,EAAEoC,GAAK,IAAM5E,KAAKoM,MAAM3F,EAAEjE,EAAEL,OAAAA,GAAAA,SAAAA,EA5HtCsI,GAAAA,EAAAA,KAAAA,GAAAA,KACLA,OAASA,EAAAA,KACTW,UAAY,UACZtC,KAAO,OAEPiD,aAAe,OACfE,cAAgB,MCDJI,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAqBFvD,EAAMwD,GAAAA,OAChB1M,KAAK2M,WAAAA,KAGHC,oBAAoB1D,EAAMwD,GAAAA,KAF1BC,WAAa,GAKf3M,KAAK2M,WAAWzD,KAAOlJ,KAAK2M,WAAWzD,GAAQ,SAC/CyD,WAAWzD,GAAMa,KAAK2C,GAEpBA,IAAAA,CAAAA,IAAAA,sBAAAA,MAAAA,SAGWxD,EAAMwD,GAAAA,GACnB1M,KAAK2M,YACL3M,KAAK2M,WAAWzD,GAAAA,IAAAA,IAEf3B,EAAMvH,KAAK2M,WAAWzD,GACtB/G,EAASoF,EAAIpF,OAEVjB,EAAI,EAAGA,EAAIiB,EAAQjB,IAAAA,GACtBqG,EAAIrG,KAAOwL,EAAU,CACR,IAAXvK,SACKnC,KAAK2M,WAAWzD,GAAAA,EAKnB2D,OAAO3L,EAAG,aAAAmE,IAAAA,0BAAA/D,MAAAA,SAQE4H,GACjBA,EACIlJ,KAAK2M,mBAAmB3M,KAAK2M,WAAWzD,GADtClJ,KAAK2M,WAAa,QAAAtH,IAAAA,gBAAA/D,MAAAA,SAIjB4H,EAAMrB,GAAAA,IACdyE,GAAAA,EACEQ,EAAY9M,KAAK2M,WAAAA,GAEnBzD,GAAQ4D,EAAW,KACjBvF,EAAMuF,EAAU5D,GAAAA,IACf3B,EAAK,OAAO+E,EAAAA,IAAAA,IAKbS,OAAAA,EACA7L,EAAIqG,EAAIpF,OACLjB,KAAAA,EACKqG,EAAIrG,GAAAA,EACLoL,GAAUS,EAAQlF,GAAAA,QAItByE,IAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAGMpD,GAAAA,IACT4D,EAAY9M,KAAK2M,WAAAA,SACbG,IAAaA,EAAU5D,OAAAA,CAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAjFvBpC,GAAAA,EACHO,UAAU2F,cAAgBP,EAAgBpF,UAAU2F,cAAAA,EAEpD3F,UAAU4F,iBACfR,EAAgBpF,UAAU4F,iBAAAA,EAErB5F,UAAUuE,iBACfa,EAAgBpF,UAAUuE,iBAAAA,EAErBvE,UAAUuF,oBACfH,EAAgBpF,UAAUuF,oBAAAA,EAErBvF,UAAU6F,wBACfT,EAAgBpF,UAAU6F,4BAAAA,GAAAA,SAAAA,IAAAA,EAAAA,KAAAA,GAAAA,KAhBvBP,WAAa,SCRDQ,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAKTC,EAAWC,EAAMC,GAAAA,KACpBC,eAAeH,EAAWC,EAAMC,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAKxBrF,EAAUoF,EAAMC,GACxBrF,EAASuF,QAAAA,EACHC,IAAI7K,EAAEyF,KAAKJ,EAASrF,GAAAA,EACpB6K,IAAIrF,EAAEC,KAAKJ,EAASG,GAAAA,EAEpBlI,EAAEwN,eAAe,EAAIzF,EAAS0F,MAAAA,EAC9BvF,EAAEmC,IAAItC,EAAS/H,EAAEwN,eAAeL,IAAAA,EAChCzK,EAAE2H,IAAItC,EAASwF,IAAIrF,EAAEsF,eAAeL,IAEzCC,GAASrF,EAASG,EAAEsF,eAAeJ,GAAAA,EAE9BpN,EAAE0N,aAAAA,GAAAA,SAAAA,EArBH1E,GAAAA,EAAAA,KAAAA,GAAAA,KACLA,KAAOA,EAAAA,ICKK2E,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,cAAAA,MAAAA,SA8EPC,GAAAA,EACHC,KAAK/N,MAAAA,KACPoM,UAAUrC,KAAK+D,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SASPA,GAAAA,IACPE,EAAQhO,KAAKoM,UAAUxE,QAAQkG,GAAAA,KAChC1B,UAAUS,OAAOmB,EAAO,GAAA5M,EACtB6M,OAAOjO,QAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAYLwK,GAAAA,KACJM,SAASf,KAAKS,IAAAA,EACX0D,OAASlO,MAEZgN,cAAca,EAAOM,cAAe3D,KAAAA,CAAAA,IAAAA,gBAAAA,MAAAA,SAY7BA,GAAAA,IACNwD,EAAQhO,KAAK8K,SAASlD,QAAQ4C,GAAAA,KAC/BM,SAAS+B,OAAOmB,EAAO,GAAA5M,EACpB8M,OAAS,UAEZlB,cAAca,EAAOO,gBAAiB5D,KAAAA,CAAAA,IAAAA,SAAAA,MAAAA,WAYzB,SAAdxK,KAAKqO,MAAAA,KACFrB,cAAca,EAAOS,eAEtBT,EAAOU,WACJvO,KAAKwO,OAAMxO,KAAKwO,MAAO,IAAIC,MAAOC,WAAAA,KAClCC,KAAM,IAAIF,MAAOC,UAAAA,KACjBE,QAAmC,MAAxB5O,KAAK2O,IAAM3O,KAAKwO,MAAAA,KAE3BK,qBAEc,EAAf7O,KAAK4O,SAAa5O,KAAK8O,eAAe9O,KAAK4O,SAAAA,KAC1CJ,KAAOxO,KAAK2O,KAAAA,KAEZG,eAAejB,EAAOkB,kBAAAA,KAGxB/B,cAAca,EAAOmB,uBAKrBhP,KAAKwO,OAAMxO,KAAKwO,MAAO,IAAIC,MAAOC,WAAAA,KAClCC,KAAM,IAAIF,MAAOC,UAAAA,KACjBE,QAAmC,MAAxB5O,KAAK2O,IAAM3O,KAAKwO,MAE5BxO,KAAK4O,QAAU5O,KAAKiP,YAAAA,KACjBjC,cAAca,EAAOS,eAAAA,KACrBQ,eAAe9O,KAAKiP,WAAAA,KAEpBT,KAAOxO,KAAK2O,IAAO3O,KAAK4O,QAAU5O,KAAKiP,UAAa,SACpDjC,cAAca,EAAOmB,yBAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAKjBJ,GAAAA,IAAAA,IACT1N,EAAIlB,KAAK8K,SAAS3I,OACfjB,KAAAA,KAAU4J,SAAS5J,GAAGgO,OAAON,KAAAA,CAAAA,IAAAA,qBAAAA,MAAAA,WAW/Bf,EAAOgB,oBACO,GAAf7O,KAAK4O,UAAAA,KACFJ,MAAO,IAAIC,MAAOC,UAAAA,KAClBE,QAAU,MAAAvJ,IAAAA,WAAA/D,MAAAA,WAAA,QAYb0I,EAAQ,EACR9I,EAAIlB,KAAK8K,SAAS3I,OAEfjB,KAAAA,GAAclB,KAAK8K,SAAS5J,GAAGkM,UAAUjL,OAChD,OAAO6H,IAAAA,CAAAA,IAAAA,kBAAAA,MAAAA,WAAAA,IAAAA,IAIHoD,EAAY,GACZlM,EAAIlB,KAAK8K,SAAS3I,OAEfjB,KAAAA,EAAiBkM,EAAUpF,OAAOhI,KAAK8K,SAAS5J,GAAGkM,WAC1D,OAAOA,IAAAA,CAAAA,IAAAA,qBAAAA,MAAAA,WAAAA,EAIF+B,WAAWnP,KAAK8K,YAAAA,CAAAA,IAAAA,UAAAA,MAAAA,SAAAA,GAWA,SAAfsE,IAAAA,EACC/B,KAAO,EAAAnM,EACPsN,KAAO,EAAAtN,EACPqK,KAAK5C,UAAAA,EAELwG,WAAWtD,EAAKf,UAAAA,EAChBqE,WAAWtD,EAAKO,UAAWP,EAAKwD,mBAAAA,IAAAA,EAAAA,KAAAA,EAAAA,UAAAA,aAAAA,IAAAA,GAAAA,EAAAA,WAI1BD,EAAc,KAAAvI,MAAA,CAAAxB,IAAAA,MAAAiK,IAAAA,SAlLrBC,GAAAA,KACDlB,KAAOkB,EAAAA,KACPN,UACK,SAARM,EAAiB1B,EAAOkB,iBAAmBpP,EAASU,MAAM,EAAIkP,EAAK,IAAAC,IAAAA,WAAA,OAI9DxP,KAAKqO,SAAAA,GAAAA,SAAAA,EA1BFoB,GAAAA,EAAAA,KAAAA,GAAAA,KACL3E,SAAW,QACXsB,UAAY,QAEZiB,KAAO,OACPsB,IAAM,OACNH,KAAO,OACPI,QAAU,OAEVc,MAAQ,IAAIrF,EAAMrK,MAAAA,KAClBuL,KAAO,IAAIhC,EAAK,SAEhBkG,gBAAkB7N,EAAKM,UAAUuN,EAAiB5B,EAAO8B,OAAAA,KACzDC,WAAa,IAAIzC,EAAYnN,KAAKyP,iBAAAA,KAElCpB,KAAO,YACPY,UAAYpB,EAAOkB,iBAxDPlB,EACZU,WAAAA,EADYV,EAIZgC,QAAU,IAJEhC,EAKZ8B,MAAQ,QALI9B,EAMZiC,IAAM,eANMjC,EASZkC,iBAAmB,mBATPlC,EAUZmC,gBAAkB,kBAVNnC,EAWZoC,eAAiB,iBAXLpC,EAYZqC,cAAgB,gBAZJrC,EAcZM,cAAgB,gBAdJN,EAeZO,gBAAkB,kBAfNP,EAiBZS,cAAgB,gBAjBJT,EAkBZmB,oBAAsB,sBAlBVnB,EAmBZkB,iBAAmB,MAnBPlB,EAqBZgB,oBAAAA,EAAqBsB,EA+NdrI,KAAK+F,GAAAA,IC3PAuC,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,WAAAA,KAQZpE,EAAI,SACJpF,EAAI,SACJzG,EAAI,QAAAkQ,GAAA,iBATCrE,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAI,IAAKpF,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAI,IAAKzG,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAI,IAAAgB,EAAAA,KAAAA,GAAAA,KAC3B6K,EAAIA,EAAAA,KACJpF,EAAIA,EAAAA,KACJzG,EAAIA,ECFb,MAAe,CAAAmQ,WAAAA,SACFhP,GAAAA,OACFA,GAAAA,WAAAA,SAGEA,GAAAA,OACFlB,KAAKY,IAAIM,EAAO,IAAAiP,YAAAA,SAGbjP,GAAAA,QACDlB,KAAKY,IAAIM,EAAQ,EAAG,GAAK,IAAAkP,cAAAA,SAGtBlP,GAAAA,OACPA,GAAS,IAAO,EAAU,GAAMlB,KAAKY,IAAIM,EAAO,IAE7C,KAAQA,GAAS,GAAKA,EAAQ,IAAAmP,YAAAA,SAG5BnP,GAAAA,OACHlB,KAAKY,IAAIM,EAAO,IAAAoP,aAAAA,SAGZpP,GAAAA,OACJlB,KAAKY,IAAIM,EAAQ,EAAG,GAAK,GAAAqP,eAAAA,SAGnBrP,GAAAA,OACRA,GAAS,IAAO,EAAU,GAAMlB,KAAKY,IAAIM,EAAO,GAE9C,IAAOlB,KAAKY,IAAIM,EAAQ,EAAG,GAAK,IAAAsP,YAAAA,SAG7BtP,GAAAA,OACHlB,KAAKY,IAAIM,EAAO,IAAAuP,aAAAA,SAGZvP,GAAAA,QACFlB,KAAKY,IAAIM,EAAQ,EAAG,GAAK,IAAAwP,eAAAA,SAGrBxP,GAAAA,OACRA,GAAS,IAAO,EAAU,GAAMlB,KAAKY,IAAIM,EAAO,IAE7C,KAAQA,GAAS,GAAKlB,KAAKY,IAAIM,EAAO,GAAK,IAAAyP,WAAAA,SAG1CzP,GAAAA,OACiC,EAAlClB,KAAKqC,IAAInB,EAAQ3B,EAASqR,OAAAA,YAAAA,SAGxB1P,GAAAA,OACHlB,KAAKuC,IAAIrB,EAAQ3B,EAASqR,OAAAA,cAAAA,SAGrB1P,GAAAA,OACJ,IAAOlB,KAAKqC,IAAIrC,KAAKV,GAAK4B,GAAS,IAAA2P,WAAAA,SAGlC3P,GAAAA,OACQ,IAAVA,EAAc,EAAIlB,KAAKY,IAAI,EAAG,IAAMM,EAAQ,KAAA4P,YAAAA,SAGzC5P,GAAAA,OACO,IAAVA,EAAc,EAAgC,EAA3BlB,KAAKY,IAAI,GAAI,GAAKM,IAAAA,cAAAA,SAGhCA,GAAAA,OACE,IAAVA,EAAoB,EAEV,IAAVA,EAAoB,GAEnBA,GAAS,IAAO,EAAU,GAAMlB,KAAKY,IAAI,EAAG,IAAMM,EAAQ,IAExD,IAAqC,EAA7BlB,KAAKY,IAAI,GAAI,KAAOM,KAAAA,WAAAA,SAG1BA,GAAAA,QACAlB,KAAK+Q,KAAK,EAAI7P,EAAQA,GAAS,IAAA8P,YAAAA,SAG9B9P,GAAAA,OACHlB,KAAK+Q,KAAK,EAAI/Q,KAAKY,IAAIM,EAAQ,EAAG,KAAA+P,cAAAA,SAG7B/P,GAAAA,OACPA,GAAS,IAAO,GAAW,IAAOlB,KAAK+Q,KAAK,EAAI7P,EAAQA,GAAS,GAC/D,IAAOlB,KAAK+Q,KAAK,GAAK7P,GAAS,GAAKA,GAAS,IAAAgQ,WAAAA,SAG3ChQ,GAAAA,OAEFA,EAAQA,GAAS,QAAUA,EAD1B,UAAAiQ,YAAAA,SAIEjQ,GAAAA,QAEFA,EAAqBA,GAAS,QAAUA,EADxC,SACqD,GAAAkQ,cAAAA,SAGjDlQ,GAAAA,IACRoB,EAAI,eACHpB,GAAS,IAAO,EACLA,EAAQA,IAAyB,GAAdoB,GAAK,QAAcpB,EAAQoB,GAArD,GACF,KAAQpB,GAAS,GAAKA,IAAyB,GAAdoB,GAAK,QAAcpB,EAAQoB,GAAK,IAAA+O,UAAAA,SAGhEC,GAAAA,MACY,mBAATA,EAA4BA,EAC3B1R,KAAK0R,IAAS1R,KAAKsQ,aC7GdqB,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SAMf3M,EAAGzC,GAAAA,OAAAA,KACAyC,EAAIA,EAAAA,KACJzC,EAAIA,EACFvC,OAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAGJgF,GAAAA,OAAAA,KACEA,EAAIA,EACFhF,OAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAGJuC,GAAAA,OAAAA,KACEA,EAAIA,EACFvC,OAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,OAIQ,IAAXA,KAAKgF,EAAgB5E,KAAKwR,MAAM5R,KAAKuC,EAAGvC,KAAKgF,GAC/B,EAAThF,KAAKuC,EAAc5C,EAASqR,KAC5BhR,KAAKuC,EAAI,GAAW5C,EAASqR,UAAAA,IAAjC,CAAA3L,IAAAA,OAAA/D,MAAAA,SAGF8G,GAAAA,OAAAA,KACEpD,EAAIoD,EAAEpD,EAAAA,KACNzC,EAAI6F,EAAE7F,EAEJvC,OAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SAGLoI,EAAGyJ,GAAAA,YAAAA,IACDA,EACK7R,KAAK8R,WAAW1J,EAAGyJ,IAAAA,KAGvB7M,GAAKoD,EAAEpD,EAAAA,KACPzC,GAAK6F,EAAE7F,EAELvC,QAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAGHE,EAAGC,GAAAA,OAAAA,KACF6E,GAAK9E,EAAAA,KACLqC,GAAKpC,EAEHH,OAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAGEE,EAAGC,GAAAA,OAAAA,KACP6E,EAAI9E,EAAE8E,EAAI7E,EAAE6E,EAAAA,KACZzC,EAAIrC,EAAEqC,EAAIpC,EAAEoC,EAEVvC,OAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SAGLoI,EAAGyJ,GAAAA,YAAAA,IACDA,EACK7R,KAAK+R,WAAW3J,EAAGyJ,IAAAA,KAGvB7M,GAAKoD,EAAEpD,EAAAA,KACPzC,GAAK6F,EAAE7F,EAELvC,QAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAGEE,EAAGC,GAAAA,OAAAA,KACP6E,EAAI9E,EAAE8E,EAAI7E,EAAE6E,EAAAA,KACZzC,EAAIrC,EAAEqC,EAAIpC,EAAEoC,EAEVvC,OAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAGI0C,GAAAA,OACD,IAANA,GAAAA,KACGsC,GAAKtC,EAAAA,KACLH,GAAKG,GAAAA,KAEL4M,IAAI,EAAG,GAGPtP,OAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAGM0C,GAAAA,OAAAA,KACRsC,GAAKtC,EAAAA,KACLH,GAAKG,EAEH1C,OAAAA,CAAAA,IAAAA,SAAAA,MAAAA,WAAAA,OAIAA,KAAK0N,gBAAgB,MAAArI,IAAAA,MAAA/D,MAAAA,SAG1B8G,GAAAA,OACKpI,KAAKgF,EAAIoD,EAAEpD,EAAIhF,KAAKuC,EAAI6F,EAAE7F,IAAAA,CAAAA,IAAAA,WAAAA,MAAAA,WAAAA,OAI1BvC,KAAKgF,EAAIhF,KAAKgF,EAAIhF,KAAKuC,EAAIvC,KAAKuC,IAAAA,CAAAA,IAAAA,SAAAA,MAAAA,WAAAA,OAIhCnC,KAAK+Q,KAAKnR,KAAKgF,EAAIhF,KAAKgF,EAAIhF,KAAKuC,EAAIvC,KAAKuC,KAAAA,CAAAA,IAAAA,YAAAA,MAAAA,WAAAA,OAI1CvC,KAAKgS,aAAahS,KAAKmC,YAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAGrBiG,GAAAA,OACFhI,KAAK+Q,KAAKnR,KAAKiS,kBAAkB7J,MAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAGnC8J,GAAAA,IACClN,EAAIhF,KAAKgF,EACTzC,EAAIvC,KAAKuC,EAAAA,OAAAA,KAEVyC,EAAIA,EAAI5E,KAAKqC,IAAIyP,GAAO3P,EAAInC,KAAKuC,IAAIuP,GAAAA,KACrC3P,GAAKyC,EAAI5E,KAAKuC,IAAIuP,GAAO3P,EAAInC,KAAKqC,IAAIyP,GAEpClS,OAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,SAGSoI,GAAAA,IACV+J,EAAKnS,KAAKgF,EAAIoD,EAAEpD,EACAzC,OAEf4P,EAAKA,GAFNC,EAAKpS,KAAKuC,EAAI6F,EAAE7F,GAEA6P,IAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAGnBhK,EAAGiK,GAAAA,OAAAA,KACDrN,IAAMoD,EAAEpD,EAAIhF,KAAKgF,GAAKqN,EAAAA,KACtB9P,IAAM6F,EAAE7F,EAAIvC,KAAKuC,GAAK8P,EAEpBrS,OAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAGFoI,GAAAA,OACEA,EAAEpD,IAAMhF,KAAKgF,GAAKoD,EAAE7F,IAAMvC,KAAKuC,IAAAA,CAAAA,IAAAA,QAAAA,MAAAA,WAAAA,OAAAA,KAIjCyC,EAAI,OACJzC,EAAI,EACFvC,OAAAA,CAAAA,IAAAA,QAAAA,MAAAA,WAAAA,OAIA,IAAI2R,EAAS3R,KAAKgF,EAAGhF,KAAKuC,OAAAA,GAAAA,SAAAA,EA1JvByC,EAAGzC,GAAAA,EAAAA,KAAAA,GAAAA,KACRyC,EAAIA,GAAK,OACTzC,EAAIA,GAAK,ECFlB,IAOqB+P,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,eAAAA,MAAAA,WAAAA,OA0DVlS,KAAKwR,MAAM5R,KAAKoI,EAAEpD,GAAIhF,KAAKoI,EAAE7F,GAAK5C,EAASE,UAAAA,CAAAA,IAAAA,QAAAA,MAAAA,WAAAA,OAAAA,KAI7C0S,KAAOtS,EAAAA,EAAAA,KACPuS,IAAM,OAENC,MAAAA,EAAO,KACPjF,OAAAA,EAAQ,KACRlD,KAAO,UACPoI,OAAS,UACTxE,OAAS,UAETyE,OAAS,OACThF,KAAO,OACPiF,OAAS,QACTP,MAAQ,OACRpN,MAAQ,OACR4N,SAAW,OACX9G,MAAQ,UAERnJ,EAAE0M,IAAI,EAAG,QACTlH,EAAEkH,IAAI,EAAG,QACTpP,EAAEoP,IAAI,EAAG,QACT7B,IAAI7K,EAAE0M,IAAI,EAAG,QACb7B,IAAIrF,EAAEkH,IAAI,EAAG,QACb7B,IAAIvN,EAAEoP,IAAI,EAAG,QACbwD,OAASpB,EAAKpB,WAAAA,KAEdyC,IAAIC,QAAAA,EACJvL,YAAYzH,KAAKiT,MAAAA,KACjBC,sBAEElT,OAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAGFqN,EAAMW,GACNhO,KAAKwN,QAAAA,KACHgF,KAAOnF,EAAAA,KACP8F,gBAAgB9F,EAAMW,IAGzBhO,KAAKwS,IAAMxS,KAAKuS,MACZtN,EAAQjF,KAAK8S,OAAO9S,KAAKwS,IAAMxS,KAAKuS,MAAAA,KACrCI,OAASvS,KAAKgT,IAAI,EAAInO,EAAO,SAE7B0D,YAAAA,CAAAA,IAAAA,kBAAAA,MAAAA,SAIO0E,EAAMW,GAAAA,IACd7L,EAASnC,KAAKmL,WAAWhJ,OAC3BjB,OAAAA,EAFgB8M,IAIf9M,EAAI,EAAGA,EAAIiB,EAAQjB,IAAAA,KACjBiK,WAAWjK,IACdlB,KAAKmL,WAAWjK,GAAGmS,eAAerT,KAAMqN,EAAMW,KAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAOvCsF,GAAAA,KACNnI,WAAWpB,KAAKuJ,GAEjBA,EAAU9K,eAAe,YAAY8K,EAAUC,QAAQxJ,KAAK/J,MAAAA,EACtDwT,WAAWxT,QAAAA,CAAAA,IAAAA,gBAAAA,MAAAA,SAMTmL,GAAAA,IACNhJ,EAASgJ,EAAWhJ,OACtBjB,OAAAA,EAFQiK,IAIPjK,EAAI,EAAGA,EAAIiB,EAAQjB,IAAAA,KACjBuS,aAAatI,EAAWjK,MAAAA,CAAAA,IAAAA,kBAAAA,MAAAA,SAIjBoS,IAGD,GAFPtF,EAAQhO,KAAKmL,WAAWvD,QAAQ0L,MAGlBtT,KAAKmL,WAAW0B,OAAOmB,EAAO,GACtCuF,QAAU,SAAAlO,IAAAA,sBAAA/D,MAAAA,WAAAoS,EAKjBC,WAAW3T,KAAKmL,cAAAA,CAAAA,IAAAA,UAAAA,MAAAA,WAAAA,KAQhB+H,sBAAAA,KACAP,OAAS,OACTF,MAAAA,EAAO,KACPvE,OAAS,SAAA0F,GAAA,WAhIJ1L,GAAAA,EAAAA,KAAAA,GAAAA,KA/BZhE,GAAK,QAGLuJ,IAAM,QAGNwF,KAAO,QAGP9H,WAAa,QAGbvI,EAAI,QAGJwF,EAAI,QAGJlI,EAAI,QAGJ6S,IAAM,QAgBC3H,KAAO,gBACPlH,GAAK6E,EAAK7E,GAAGlE,KAAKoL,MAAAA,KAClBqC,IAAM,QACNwF,KAAO,QACP9H,WAAa,QAEbvI,EAAI,IAAI+O,EAAAA,KACRvJ,EAAI,IAAIuJ,EAAAA,KACRzR,EAAI,IAAIyR,EAAAA,KACRlE,IAAI7K,EAAI,IAAI+O,EAAAA,KACZlE,IAAIrF,EAAI,IAAIuJ,EAAAA,KACZlE,IAAIvN,EAAI,IAAIyR,EAAAA,KAEZoB,IAAM,IAAI3C,EAAAA,KACV4C,QAAAA,GACGpR,EAAKiS,QAAQ7T,KAAMkI,GChE/B,MAAe,CAAA4L,SAAAA,SAiBJC,GACiDA,OAAlDC,EAAwB,MAAhBD,EAAEvO,OAAO,GAAauO,EAAEE,UAAU,EAAG,GAAKF,EAKjD,CAAE/H,EAJCkI,SAASF,EAAMC,UAAU,EAAG,GAAI,IAI9BrN,EAHFsN,SAASF,EAAMC,UAAU,EAAG,GAAI,IAG3B9T,EAFL+T,SAASF,EAAMC,UAAU,EAAG,GAAI,MAAAE,SAAAA,SAenCC,GAAAA,MAAAA,OACOA,EAAIpI,EAAAA,KAAMoI,EAAIxN,EAAAA,KAAMwN,EAAIjU,EAAAA,KAAAA,qBAAAA,SAGnByC,GAAAA,OACM,MAAlByR,OAAOzR,EAAEmQ,IAAI/G,GAA+B,IAAlBqI,OAAOzR,EAAEmQ,IAAInM,GAAWyN,OAAOzR,EAAEmQ,IAAI5S,KCvCrDmU,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SAMftI,EAAGkG,GAAAA,OAAAA,KACAlG,EAAIA,EAAAA,KACJkG,IAAMA,EACJlS,OAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAGJgM,GAAAA,OAAAA,KACEA,EAAIA,EACFhM,OAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAGFkS,GAAAA,OAAAA,KACAA,IAAMA,EACJlS,OAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAGJ4C,GAAAA,OAAAA,KACEoJ,EAAIpJ,EAAEoJ,EAAAA,KACNkG,IAAMtP,EAAEsP,IACNlS,OAAAA,CAAAA,IAAAA,WAAAA,MAAAA,WAAAA,OAIA,IAAI2R,EAAS3R,KAAKuU,OAAQvU,KAAKwU,UAAAA,CAAAA,IAAAA,OAAAA,MAAAA,WAAAA,OAI/BxU,KAAKgM,EAAI5L,KAAKuC,IAAI3C,KAAKkS,OAAAA,CAAAA,IAAAA,OAAAA,MAAAA,WAAAA,OAItBlS,KAAKgM,EAAI5L,KAAKqC,IAAIzC,KAAKkS,OAAAA,CAAAA,IAAAA,YAAAA,MAAAA,WAAAA,OAAAA,KAI1BlG,EAAI,EACFhM,OAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAGFoI,GAAAA,OACEA,EAAE4D,IAAMhM,KAAKgM,GAAK5D,EAAE8J,MAAQlS,KAAKkS,MAAAA,CAAAA,IAAAA,QAAAA,MAAAA,WAAAA,OAAAA,KAInClG,EAAI,OACJkG,IAAM,EACJlS,OAAAA,CAAAA,IAAAA,QAAAA,MAAAA,WAAAA,OAIA,IAAIsU,EAAQtU,KAAKgM,EAAGhM,KAAKkS,SAAAA,GAAAA,SAAAA,EAvDtBlG,EAAGkG,GAAAA,EAAAA,KAAAA,GAAAA,KACRlG,EAAI5L,KAAKqU,IAAIzI,IAAM,OACnBkG,IAAMA,GAAO,ECLtB,IAAMwC,EAAO,CAAAzK,OAAAA,SACJ0K,GAAAA,IACCC,EAAM,IAAIC,aAAa,UACzBF,GAAM3U,KAAKsP,IAAIqF,EAAMC,GAElBA,GAAAA,IAAAA,SAGLE,EAAMC,GAAAA,IACH,IAAI7T,EAAI,EAAGA,EAAI,EAAGA,IAAAA,EAAUA,GAAK4T,EAAK5T,GAE3C,OAAO6T,GAAAA,SAAAA,SAGAH,EAAKG,EAAMJ,GAAAA,IACd5R,EAAM6R,EAAI,GACZ5R,EAAM4R,EAAI,GACV3R,EAAM2R,EAAI,GACV1R,EAAM0R,EAAI,GACVzR,EAAMyR,EAAI,GACVvR,EAAMuR,EAAI,GACVtR,EAAMsR,EAAI,GACVpR,EAAMuR,EAAK,GACXtR,EAAMsR,EAAK,GACXrR,EAAMqR,EAAK,GACXpR,EAAMoR,EAAK,GACXnR,EAAMmR,EAAK,GAEA,OADXjR,EAAMiR,EAAK,GACXhR,EAAMgR,EAAK,KAER,GAAKvR,EAAMT,EAAMU,EAAMP,EAAAA,EACvB,GAAKM,EAAMR,EAAMS,EAAMN,EAAAA,EACvB,GAAKF,EAAMS,EAAAA,EACX,GAAKC,EAAMZ,EAAMa,EAAMV,EAAAA,EACvB,GAAKS,EAAMX,EAAMY,EAAMT,EAAAA,EACvB,GAAKW,EAAMf,EAAMgB,EAAMb,EAAMG,EAAAA,EAC7B,GAAKS,EAAMd,EAAMe,EAAMZ,EAAMG,EAE3BqR,GAAAA,QAAAA,SAGDC,EAAKD,GAAAA,IACP5R,EAAM6R,EAAI,GACZ5R,EAAM4R,EAAI,GACV1R,EAAM0R,EAAI,GACVzR,EAAMyR,EAAI,GACVvR,EAAMuR,EAAI,GACVtR,EAAMsR,EAAI,GAEVhR,GAAOV,EAEeU,OADtBG,EAAMT,EAAMJ,EAAMC,EAAME,EAAAA,EAIrB,GAHCN,EAHEI,EAGUH,EAAMY,GAAAA,EAInB,GAPGT,EAOQe,EAAAA,EACX,IAAMlB,EAAMkB,EAAAA,EACZ,GAAKN,EAAMM,EAAAA,EACX,GAAKnB,EAAMmB,EAAAA,EACX,GAAKH,EAAMG,EAAAA,EACX,KAAOZ,EAAMP,EAAMC,EAAMK,GAAOa,EAE9ByQ,GAAAA,aAAAA,SAGIK,EAAGC,EAAKN,GAAAA,IACf3P,EAAIiQ,EAAI,GACF,OAAR1S,EAAI0S,EAAI,KAEL,GAAKjQ,EAAIgQ,EAAE,GAAKzS,EAAIyS,EAAE,GAAKA,EAAE,GAAA9T,EAC7B,GAAK8D,EAAIgQ,EAAE,GAAKzS,EAAIyS,EAAE,GAAKA,EAAE,GAE3BL,ICpEUO,GAAAA,EAAAA,EAAkBxT,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,WAAAA,MAAAA,WAAAA,IAO7B4D,EAAM1D,EAAKC,iBAAiB7B,KAAKmV,MAAAA,MACxB,WAAR7P,GAA4B,WAARA,EAAmB3F,EAASyV,cAAgB9P,KAAAA,CAAAA,CAAAA,IAAAA,kBAAAA,MAAAA,SAclDiC,GAAAA,OAChBA,EAEDA,aAAe2N,EAAkB3N,EACzB,IAAI2N,EAAU3N,GAHT,SAAA8N,GAAA,WAtBPtJ,GAAAA,EAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,EAAAA,WAAAA,OAAAA,eAAAA,IAAAA,KAAAA,OAAAA,OAAAA,EAELoJ,KAAOvT,EAAK4F,QAAQuE,GAAAA,EAAAA,ICPRuJ,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAYVtQ,EAAGzC,GAAAA,OACNyC,GAAKhF,KAAKuV,OAASvQ,GAAKhF,KAAKgF,GAAKzC,GAAKvC,KAAKwV,QAAUjT,GAAKvC,KAAKuC,MAAAA,GAAAA,SAAAA,EAZ1DyC,EAAGzC,EAAGsP,EAAGkC,GAAAA,EAAAA,KAAAA,GAAAA,KACd/O,EAAIA,EAAAA,KACJzC,EAAIA,EAAAA,KAEJ4B,MAAQ0N,EAAAA,KACRzN,OAAS2P,EAAAA,KAETyB,OAASxV,KAAKuC,EAAIvC,KAAKoE,OAAAA,KACvBmR,MAAQvV,KAAKgF,EAAIhF,KAAKmE,MAAAA,ICNVsR,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,OAAAA,MAAAA,WAAAA,KAsBZC,UAAY,OACZC,SAAW3V,KAAK4V,QAAQ3T,aAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAGtBoL,GAAAA,OAAAA,KACFqI,WAAarI,EAEdrN,KAAK0V,WAAa1V,KAAK2V,UAAAA,KACpBD,UAAY,OACZC,SAAW3V,KAAK4V,QAAQ3T,WAEP,IAAlBjC,KAAK6V,OAAO1V,EACoB,GAA9BH,KAAK6V,OAAO5T,UAAAA,GAA8B,EAClC,EAELjC,KAAK6V,OAAO5T,UAAAA,IAIhB,MAAA6T,GAAA,WA7BGC,EAAQC,GAAAA,EAAAA,KAAAA,GAAAA,KACbH,OAASnU,EAAKuU,aAAarU,EAAKM,UAAU6T,EAAQ,SAClDH,QAAUlU,EAAKuU,aAAarU,EAAKM,UAAU8T,EAAS,SAEpDN,UAAY,OACZC,SAAW,OACX5H,OAAAA,ICrBYmI,GAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,cAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAGd1L,EAASvC,GACRA,EAAAA,KACGuL,WAAWvL,GAAAA,KAEXuL,WAAWhJ,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,gBAAAA,IAAAA,SAAAA,KAAAA,EAAAA,KAAAA,IAAAA,ICJD2L,IAAAA,EAAAA,GAAaD,GAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAQrBpP,GACL9G,KAAKoW,QAAQlW,IAAMD,EAAAA,EAAU6G,EAAOyL,KAAOtS,EAAAA,EAC1C6G,EAAOyL,KAAOvS,KAAKoW,QAAQnU,eAAAA,IAAAA,SAAAA,GATtB/B,EAAGC,EAAG4B,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAGXqU,QAAU1U,EAAKuU,aAAa/V,EAAGC,EAAG4B,GAAAA,EAClCqJ,KAAO,OAAAlL,EAAA,ICNKmW,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,cAAAA,MAAAA,cAAAA,CAAAA,IAAAA,WAAAA,MAAAA,gBAAAA,IAAAA,SAAAA,KAAAA,EAAAA,KAAAA,IAAAA,KAEZC,OAAS,IAAI3E,EAAS,EAAG,QACzBrR,OAAS,OACTiW,UAAY,YACZC,OAAAA,EAAQ,ICLIC,IAAAA,EAAAA,GAAkBJ,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,OAAAA,KAS9BC,OAAOtR,EAAIhF,KAAKgF,EAAAA,KAChBsR,OAAO/T,EAAIvC,KAAKuC,EAEdvC,KAAKsW,SAAAA,CAAAA,IAAAA,WAAAA,MAAAA,WAIRtW,KAAKwW,QAAAA,QACCE,MAAM,2DACTF,OAAAA,OAAQG,IAAA,YAjBL3R,EAAGzC,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAGRyC,EAAIA,EAAAA,EACJzC,EAAIA,EAAAA,EAAAA,ICHQqU,IAAAA,EAAAA,GAAiBV,GAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAO9BW,GAAAA,KACCA,KAAOjV,EAAKM,UAAU2U,EAAM,IAAIJ,MAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAG5B3P,GAAAA,KACJ+P,KAAKC,cAAAA,EAEHlU,EAAEoC,EAAIhF,KAAK6W,KAAKP,OAAOtR,EAAAA,EACvBpC,EAAEL,EAAIvC,KAAK6W,KAAKP,OAAO/T,MAAAA,IAAAA,SAAAA,GAdpBsU,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAELA,KAAOjV,EAAKM,UAAU2U,EAAM,IAAIJ,IAAAA,EAChCrL,KAAO,WAAAvE,EAAA,ICDKkQ,IAAAA,EAAAA,GAAiBb,GAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAW9Bc,EAAMC,EAAQ/N,GAAAA,KACbgO,KAAOxV,EAAKuU,aAAae,GAAAA,KACzBG,OAASzV,EAAKuU,aAAagB,GAAAA,KAC3B/N,KAAOtH,EAAKM,UAAUgH,EAAM,aAAA7D,IAAAA,oBAAA/D,MAAAA,SAGjB8V,GAAAA,OACTA,EAAKvJ,EAAOgC,UAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAGV/I,GAAAA,IAEDuQ,EADU,MAAdrX,KAAKkJ,MAA8B,MAAdlJ,KAAKkJ,MAA8B,UAAdlJ,KAAKkJ,MAC3CmO,EAAU,IAAI/C,EAClBtU,KAAKsX,kBAAkBtX,KAAKkX,KAAKjV,YACjCjC,KAAKmX,OAAOlV,WAAatC,EAASC,QAAAA,EAG7BwI,EAAEpD,EAAIqS,EAAQ9C,OAAAA,EACdnM,EAAE7F,EAAI8U,EAAQ7C,SAAAA,EAEdpM,EAAEpD,EAAIhF,KAAKsX,kBAAkBtX,KAAKkX,KAAKjV,YAAAA,EACvCmG,EAAE7F,EAAIvC,KAAKsX,kBAAkBtX,KAAKmX,OAAOlV,iBAAAA,IAAAA,SAAAA,GA/BxC+U,EAAMC,EAAQ/N,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAGnBgO,KAAOxV,EAAKuU,aAAae,GAAAA,EACzBG,OAASzV,EAAKuU,aAAagB,GAAAA,EAC3B/N,KAAOtH,EAAKM,UAAUgH,EAAM,UAAAhJ,EAE5BkL,KAAO,WAAAlL,EAAA,ICZKqX,IAAAA,EAAAA,GAAarB,GAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAOrBpP,GAAAA,EACF6G,KAAO3N,KAAKwX,QAAQvV,eAAAA,IAAAA,SAAAA,GAPjB/B,EAAGC,EAAG4B,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAEXyV,QAAU9V,EAAKuU,aAAa/V,EAAGC,EAAG4B,GAAAA,EAClCqJ,KAAO,OAAAlL,EAAA,ICJKuX,IAAAA,EAAAA,GAAevB,GAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAQ5BhW,EAAGC,EAAG4B,GAAAA,KACL6Q,OAASlR,EAAKuU,aAAa/V,EAAGC,EAAG4B,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAG7BkG,GAAAA,EACA2K,OAAS5S,KAAK4S,OAAO3Q,WAAAA,EACrBgR,KAAKyE,UAAYzP,EAAS2K,WAAAA,IAAAA,SAAAA,GAbzB1S,EAAGC,EAAG4B,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAEX6Q,OAASlR,EAAKuU,aAAa/V,EAAGC,EAAG4B,GAAAA,EAEjCqJ,KAAO,SAAAlL,EAAA,ICJKyX,IAAAA,EAAAA,GAAazB,GAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAUrBjO,GAAAA,IACH2P,EAAc5X,KAAKgG,MAAM/D,WAAAA,EAGpBqI,KADgB,iBAAhBsN,EACO,CAAAzT,MACPnE,KAAK6R,EAAAA,OACJ7R,KAAK+T,EAAAA,IACR6D,EAAAA,SAAAA,EACIC,OAAAA,GAIKD,IAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAIP5R,GAAAA,OACJA,aAAiBkP,EAAYlP,EAAQ,IAAIkP,EAAUlP,OAAAA,IAAAA,SAAAA,GA1BhDA,EAAO6L,EAAGkC,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAGf/N,MAAQ6F,EAAKoK,aAAajQ,GAAAA,EAC1B6L,EAAIjQ,EAAKM,UAAU2P,EAAG,IAAA3R,EACtB6T,EAAInS,EAAKM,UAAU6R,EAAGlI,EAAKgG,GAAAA,EAC3BzG,KAAO,OAAAlL,EAAA,ICPK4X,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SA8CXvF,EAAMO,GAAAA,KACHP,KAAO3Q,EAAKM,UAAUqQ,EAAMtS,EAAAA,GAAAA,KAC5B6S,OAASpB,EAAKD,UAAUqB,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAYlBiF,GAAAA,OACJA,EAAMrK,eAAeG,EAAOgC,WAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAYxBvO,GAAAA,OACJA,EAAQuM,EAAOgC,UAAAA,CAAAA,IAAAA,aAAAA,MAAAA,cAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAyBhB5H,EAAUoF,GAAAA,KACXmF,KAAOnF,EAERrN,KAAKwS,KAAOxS,KAAKuS,MAAQvS,KAAKyS,MAAAA,KACzBE,OAAS,OACTF,MAAAA,EAAO,KACP9J,YAEC1D,EAAQjF,KAAK8S,OAAO7K,EAASuK,IAAMvK,EAASsK,MAAAA,KAC7CI,OAASvS,KAAKgT,IAAI,EAAInO,EAAO,OAAAI,IAAAA,UAAA/D,MAAAA,WAAA,QAYlCJ,EAAIlB,KAAKuT,QAAQpR,OACdjB,KAAAA,KACEqS,QAAQrS,GAAG8W,gBAAgBhY,MAAAA,KAG/BuT,QAAQpR,OAAS,MAAA8V,IAAA,YAvGd1F,EAAMO,GAAAA,EAAAA,KAAAA,IAAAA,KAETP,KAAO3Q,EAAKM,UAAUqQ,EAAMtS,EAAAA,GAAAA,KAC5B6S,OAASpB,EAAKD,UAAUqB,GAAAA,KAExBN,IAAM,OACNG,OAAS,OACTF,MAAAA,EAAO,KACPc,QAAU,QAEVrP,GAAAA,aAAkB4T,GAAU5T,KAAAA,KAC5BkH,KAAO,YAjCC0M,GACV5T,GAAK,MCFKgU,IAAAA,EAAAA,GAAcJ,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAkC5BK,EAAIC,EAAI7F,EAAMO,GAAAA,KACdiF,MAAQ/X,KAAKqY,eAAe,IAAI1G,EAASwG,EAAIC,IAAAA,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAE9B7F,EAAMO,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAcZ7K,EAAUoF,EAAMW,GAAAA,KACzBsK,UAAUrQ,EAAUoF,EAAMW,GAAAA,EACtB9N,EAAEqK,IAAIvK,KAAK+X,WAAAA,IAAAA,SAAAA,GAtCTI,EAAIC,EAAI7F,EAAMO,GACbA,OADaA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACnBP,EAAMO,KAEPiF,MAAQlM,EAAKwM,eAAe,IAAI1G,EAASwG,EAAIC,IAAAA,EAC7ChN,KAAO,QAAAlL,EAAA,IClBOqY,IAAAA,EAAAA,GAAmBT,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAsDhCU,EAAgBT,EAAOnF,EAAQL,EAAMO,GAAAA,KACpC0F,eAAiB5W,EAAKM,UAAUsW,EAAgB,IAAI7G,GAAAA,KACpDiB,OAAShR,EAAKM,UAAU0Q,EAAQ,UAChCmF,MAAQnW,EAAKM,UAAUlC,KAAKyY,eAAeV,GAAQ,UAEnDW,SAAW1Y,KAAK4S,OAAS5S,KAAK4S,OAAAA,KAC9B+F,gBAAkB,IAAIhH,EAAAA,KACtBiH,SAAW,EAAA1Y,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAEIqS,EAAMO,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAcb7K,EAAUoF,EAAMW,GAAAA,KACxBsK,UAAUrQ,EAAUoF,EAAMW,GAAAA,KAE1B2K,gBAAgBtQ,KAAKrI,KAAKwY,gBAAAA,KAC1BG,gBAAgBE,IAAI5Q,EAASrF,GAAAA,KAC7BgW,SAAW5Y,KAAK2Y,gBAAgBC,WAEjB,KAAhB5Y,KAAK4Y,UAAsB5Y,KAAK4Y,SAAW5Y,KAAK0Y,WAAAA,KAC7CC,gBAAgBG,YAAAA,KAChBH,gBAAgBjL,eAAe,EAAI1N,KAAK4Y,SAAW5Y,KAAK0Y,UAAAA,KACxDC,gBAAgBjL,eAAe1N,KAAK+X,OAAAA,EAEhC7X,EAAEqK,IAAIvK,KAAK2Y,sBAAAA,IAAAA,SAAAA,GAhEZH,EAAgBT,EAAOnF,EAAQL,EAAMO,GACnCA,OADmCA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACzCP,EAAMO,KAEP0F,eAAiB5W,EAAKM,UAAUsW,EAAgB,IAAI7G,GAAAA,EACpDiB,OAAShR,EAAKM,UAAU0Q,EAAQ,KAAA5G,EAChC+L,MAAQnW,EAAKM,UAAU2J,EAAK4M,eAAeV,GAAQ,KAAA/L,EAEnD0M,SAAW7M,EAAK+G,OAAS/G,EAAK+G,OAAAA,EAC9B+F,gBAAkB,IAAIhH,EAAAA,EACtBiH,SAAW,EAAA5M,EAEXZ,KAAO,aAAAY,EAAA,ICpCK+M,IAAAA,EAAAA,GAAoBjB,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAqCjCkB,EAAQC,EAAQC,EAAO3G,EAAMO,GAAAA,KAC5BqG,QAAU,IAAIxH,EAASqH,EAAQC,GAAAA,KAC/BE,QAAUnZ,KAAKqY,eAAerY,KAAKmZ,SAAAA,KACnCD,MAAQA,EAAAA,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAEO3G,EAAMO,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAGjB7K,GAAAA,EACAgL,KAAK5F,KAAO,KAAAhI,IAAAA,iBAAA/D,MAAAA,SAcR2G,EAAUoF,EAAMW,GAAAA,KACxBsK,UAAUrQ,EAAUoF,EAAMW,GAAAA,EACtBiF,KAAK5F,MAAQA,EAElBpF,EAASgL,KAAK5F,MAAQrN,KAAKkZ,QAAAA,EACpBhZ,EAAEkZ,MACTzZ,EAASe,YAAYV,KAAKmZ,QAAQnU,EAAGhF,KAAKmZ,QAAQnU,GAClDrF,EAASe,YAAYV,KAAKmZ,QAAQ5W,EAAGvC,KAAKmZ,QAAQ5W,IAAAA,EAG3C0Q,KAAK5F,KAAO,OAAAgM,IAAA,YAtDbL,EAAQC,EAAQC,EAAO3G,EAAMO,GAC3BA,OAD2BA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACjCP,EAAMO,KAEPE,MAAMgG,EAAQC,EAAQC,GAAAA,EACtB7L,KAAO,EAAArB,EACPZ,KAAO,cAAAY,EAAA,ICvBKsN,IAAAA,EAAAA,GAAgBpB,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SA8B9BtR,EAAG2L,EAAMO,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KACF,EAAGlM,EAAG2L,EAAMO,OAAAA,IAAAA,SAAAA,GAjBblM,EAAG2L,EAAMO,GACFA,OADEA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACd,EAAGlM,EAAG2L,EAAMO,KACb1H,KAAO,UAAAlK,EAAA,ICdOqY,IAAAA,EAAAA,GAAkBzB,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAgDhCtN,EAASmD,EAAMpH,EAAUgM,EAAMO,GAAAA,KAC/BtI,QAAU5I,EAAKM,UAAUsI,EAAS,WAClCmD,KAAO/L,EAAKM,UAAUyL,GAAAA,GAAM,KAC5BpH,SAAW3E,EAAKM,UAAUqE,EAAU,WAEpCiT,cAAgB,QAChBC,MAAQ,IAAI9H,EAAAA,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAEGY,EAAMO,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAcZ7K,EAAUoF,EAAMW,GAAAA,IAK1B4K,EACAc,EACAC,EACAC,EAAcC,EAWVC,EAlBFC,GAAU/Z,KAAKwK,QAAUxK,KAAKwK,QAAQ4C,UAAyBpN,KAAKuL,MAApB3K,MAAMoN,GACtD7L,EAAS4X,EAAQ5X,OAEnB6X,OAAAA,EAKA9Y,OAAAA,EAT0B8M,IAWzB9M,EAAI,EAAGA,EAAIiB,EAAQjB,KAAK,EACZ6Y,EAAQ7Y,MAEF+G,IAAAA,KAChBwR,MAAMpR,KAAK2R,EAAcpX,GAAAA,KACzB6W,MAAMZ,IAAI5Q,EAASrF,IAAAA,EAEb5C,KAAKyZ,MAAMb,cAChBkB,EAAW7R,EAAS2K,OAASoH,EAAcpH,QAEtBkH,IAAAA,EAChBA,EAAW1Z,KAAK+Q,KAAKyH,GAAAA,GACpB,GAAAqB,EAEChS,EAAS0F,KAAOqM,EAAcrM,KAAAA,EAC3B3N,KAAK2N,KAAOqM,EAAcrM,KAAOgM,EAAY,GAAAxY,EAC7CnB,KAAK2N,KAAO1F,EAAS0F,KAAOgM,EAAY,GAAAvY,EAE9CwB,EAAE2H,IAAIvK,KAAKyZ,MAAMtP,QAAQ2O,YAAYpL,eAAegM,GAAWE,IAAAA,EAC1DhX,EAAE2H,IAAIvK,KAAKyZ,MAAMX,YAAYpL,eAAegM,EAAUG,IAAAA,KAE/DtT,UAAYvG,KAAKuG,SAAS0B,EAAU+R,SAAAA,IAAAA,SAAAA,GA5EjCxP,EAASmD,EAAMpH,EAAUgM,EAAMO,GAC9BA,OAD8BA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACpCP,EAAMO,KAEPE,MAAMxI,EAASmD,EAAMpH,GAAAA,EACrB6E,KAAO,YAAAY,EAAA,IC/BOkO,IAAAA,EAAAA,GAAkBpC,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAoC7BjB,EAAMN,EAAWhE,EAAMO,GAAAA,KACpB+D,KAAOA,EAAAA,KACPA,KAAKN,UAAY3U,EAAKM,UAAUqU,EAAW,QAAArV,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAE5BqR,EAAMO,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAcf7K,EAAUoF,EAAMW,GAAAA,KACtBsK,UAAUrQ,EAAUoF,EAAMW,GAAAA,KAC1B6I,KAAKsD,SAASlS,OAAAA,IAAAA,SAAAA,GAvCX4O,EAAMN,EAAWhE,EAAMO,GACnBA,OADmBA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACzBP,EAAMO,KAEPE,MAAM6D,EAAMN,GAAAA,EACZnL,KAAO,YAAAlL,EAAA,ICpBCka,IAAAA,EAAAA,GAActC,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAqC3B5X,EAAGC,EAAGoS,EAAMO,GAAAA,KACXuH,KAAOla,MAAAA,EAAAA,KACPD,EAAIwB,EAAKuU,aAAarU,EAAKM,UAAUhC,EAAG,SACxCC,EAAIuB,EAAKuU,aAAa9V,GAAAA,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAEPoS,EAAMO,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAYjB7K,GAAAA,EACAgL,KAAKqH,OAASta,KAAKE,EAAE+B,WAE1BjC,KAAKqa,KAAMpS,EAASgL,KAAKsH,OAAStS,EAASgL,KAAKqH,OAC/CrS,EAASgL,KAAKsH,OAASva,KAAKG,EAAE8B,aAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAYtBgG,EAAUoF,EAAMW,GAAAA,KACxBsK,UAAUrQ,EAAUoF,EAAMW,GAAAA,EAEtBqE,MACPpK,EAASgL,KAAKsH,QACbtS,EAASgL,KAAKqH,OAASrS,EAASgL,KAAKsH,QAAUva,KAAK2S,OAEnD1K,EAASoK,MAAQ,OAAOpK,EAASoK,MAAQ,OAAAmI,IAAA,YA7DnCta,EAAGC,EAAGoS,EAAMO,GACVA,OADUA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KAChBP,EAAMO,KAEPE,MAAM9S,EAAGC,GAAAA,EACTiL,KAAO,QAAAlL,EAAA,ICpBKua,IAAAA,EAAAA,GAAc3C,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAoC5B5X,EAAGC,EAAGoS,EAAMO,GAAAA,KACZuH,KAAOla,MAAAA,EAAAA,KACPD,EAAIwB,EAAKuU,aAAarU,EAAKM,UAAUhC,EAAG,SACxCC,EAAIuB,EAAKuU,aAAa9V,GAAAA,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAEPoS,EAAMO,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAYhB7K,GAAAA,EACDgL,KAAKyH,OAAS1a,KAAKE,EAAE+B,WAAAA,EACrBgR,KAAKyE,UAAYzP,EAAS2K,OAAAA,EAC1BK,KAAK0H,OAAS3a,KAAKqa,KAAOpS,EAASgL,KAAKyH,OAAS1a,KAAKG,EAAE8B,aAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAcnDgG,EAAUoF,EAAMW,GAAAA,KACzBsK,UAAUrQ,EAAUoF,EAAMW,GAAAA,EACtB/I,MAAQgD,EAASgL,KAAK0H,QAAU1S,EAASgL,KAAKyH,OAASzS,EAASgL,KAAK0H,QAAU3a,KAAK2S,OAEzF1K,EAAShD,MAAQ,OAAQgD,EAAShD,MAAQ,GAAA7D,EACrCwR,OAAS3K,EAASgL,KAAKyE,UAAYzP,EAAShD,UAAAA,IAAAA,SAAAA,GA1D1C/E,EAAGC,EAAGoS,EAAMO,GACXA,OADWA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACjBP,EAAMO,KAEPE,MAAM9S,EAAGC,GAAAA,EACTiL,KAAO,QAAAlL,EAAA,ICrBO0a,IAAAA,EAAAA,GAAe9C,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAwC7B5X,EAAGC,EAAGsE,EAAO8N,EAAMO,GAAAA,KACnBuH,KAAOla,MAAAA,EAAAA,KAEPD,EAAIwB,EAAKuU,aAAarU,EAAKM,UAAUhC,EAAG,kBACxCC,EAAIuB,EAAKuU,aAAarU,EAAKM,UAAU/B,EAAG,SACxCsE,MAAQ7C,EAAKM,UAAUuC,EAAO,MAAAvE,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAEfqS,EAAMO,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAYhB7K,GAAAA,EACD4K,SAAW7S,KAAKE,EAAE+B,WAAAA,EAClBgR,KAAK4H,UAAY7a,KAAKE,EAAE+B,WAE5BjC,KAAKqa,OAAMpS,EAASgL,KAAK6H,UAAY9a,KAAKG,EAAE8B,cAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAcnCgG,EAAUoF,EAAMW,GAAAA,KACzBsK,UAAUrQ,EAAUoF,EAAMW,GAE1BhO,KAAKqa,KAMc,MAAbra,KAAKE,EAAEA,GAA0B,aAAbF,KAAKE,EAAEA,GAAiC,MAAbF,KAAKE,EAAEA,IAAAA,EAEvD2S,SAAW5K,EAAS8S,gBAPV,OAAf/a,KAAKyE,OAAiC,OAAfzE,KAAKyE,OAAiC,MAAfzE,KAAKyE,MAAAA,EAC7CoO,UAAY5K,EAASgL,KAAK6H,WAAa7S,EAASgL,KAAK4H,UAAY5S,EAASgL,KAAK6H,WAAa9a,KAAK2S,OAAAA,EAEjGE,UAAY5K,EAASgL,KAAK6H,cAAAA,IAAAA,SAAAA,GAlE1BE,EAAW7a,EAAGsE,EAAO8N,EAAMO,GAC1BA,OAD0BA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KAChCP,EAAMO,KAEPE,MAAMgI,EAAW7a,EAAGsE,GAAAA,EACpB2G,KAAO,SAAAY,EAAA,ICtBOiP,IAAAA,EAAAA,GAAcnD,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAiC3B5X,EAAGC,EAAGoS,EAAMO,GAAAA,KACX5S,EAAIgV,EAAUgG,gBAAgBhb,GAAAA,KAC9BC,EAAI+U,EAAUgG,gBAAgB/a,GAAAA,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KACfoS,EAAMO,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAYjB7K,GAAAA,EACA8D,MAAQ/L,KAAKE,EAAE+B,WAAAA,EACfgR,KAAKkI,OAASC,EAAUtH,SAAS7L,EAAS8D,OAE/C/L,KAAKG,IAAG8H,EAASgL,KAAKoI,OAASD,EAAUtH,SAAS9T,KAAKG,EAAE8B,eAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAchDgG,EAAUoF,EAAMW,GACzBhO,KAAKG,GAAAA,KACFmY,UAAUrQ,EAAUoF,EAAMW,GAAAA,EAEtB+E,IAAI/G,EACX/D,EAASgL,KAAKoI,OAAOrP,GACpB/D,EAASgL,KAAKkI,OAAOnP,EAAI/D,EAASgL,KAAKoI,OAAOrP,GAAKhM,KAAK2S,OAAAA,EAClDI,IAAInM,EACXqB,EAASgL,KAAKoI,OAAOzU,GACpBqB,EAASgL,KAAKkI,OAAOvU,EAAIqB,EAASgL,KAAKoI,OAAOzU,GAAK5G,KAAK2S,OAAAA,EAClDI,IAAI5S,EACX8H,EAASgL,KAAKoI,OAAOlb,GACpB8H,EAASgL,KAAKkI,OAAOhb,EAAI8H,EAASgL,KAAKoI,OAAOlb,GAAKH,KAAK2S,OAAAA,EAElDI,IAAI/G,EAAI5L,KAAKC,MAAM4H,EAAS8K,IAAI/G,GAAAA,EAChC+G,IAAInM,EAAIxG,KAAKC,MAAM4H,EAAS8K,IAAInM,GAAAA,EAChCmM,IAAI5S,EAAIC,KAAKC,MAAM4H,EAAS8K,IAAI5S,KAAAA,EAEhC4S,IAAI/G,EAAI/D,EAASgL,KAAKkI,OAAOnP,EAAAA,EAC7B+G,IAAInM,EAAIqB,EAASgL,KAAKkI,OAAOvU,EAAAA,EAC7BmM,IAAI5S,EAAI8H,EAASgL,KAAKkI,OAAOhb,OAAAA,IAAAA,SAAAA,GAxE9BD,EAAGC,EAAGoS,EAAMO,GACVA,OADUA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KAChBP,EAAMO,KAEPE,MAAM9S,EAAGC,GAAAA,EACTiL,KAAO,QAAAlL,ECjBhB,IAAMob,GAAW,WAEIC,IAAAA,EAAAA,GAAgBzD,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAoBlB0D,EAAOzD,GAAAA,KACjBA,MAAQuD,GAAAA,KACRE,MAAQ7b,EAASD,GAAK,EAEb,UAAV8b,EAAAA,KACGA,MAAQ7b,EAASD,GAAK,EACR,SAAV8b,EAAAA,KACJA,OAAS7b,EAASD,GAAK,EACT,WAAV8b,EAAAA,KACJA,MAAQ,SACJA,aAAiB9Z,GAAAA,KACrB8Z,MAAQ,YACRC,KAAOD,GACHA,IAAAA,KACJA,MAAQA,GAImB,aAAhCE,OAAO3D,GAAO4D,eACkB,UAAhCD,OAAO3D,GAAO4D,eACkB,SAAhCD,OAAO3D,GAAO4D,cAAAA,KAET5D,MAAQuD,GACJvD,IAAAA,KACJA,MAAQA,KAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAgBXyD,EAAOzD,EAAOxF,EAAMO,GAAAA,KACnB0I,MAAQ7b,EAASD,GAAK,OACtBkc,iBAAiBJ,EAAOzD,GAAAA,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KACTxF,EAAMO,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAGjB7K,GACU,WAAfjI,KAAKwb,MAAAA,EACEvI,KAAK4I,OAASlc,EAASe,YAAYf,EAASD,GAAIC,EAASD,IAC1C,SAAfM,KAAKwb,QAAAA,EACLvI,KAAK4I,OAAS7b,KAAKyb,KAAKxZ,YAAAA,EAG1BgR,KAAK6I,QAAU,IAAInK,EAAS,EAAG,MAAAtM,IAAAA,iBAAA/D,MAAAA,SAc3B2G,EAAUoF,EAAMW,GAAAA,KACxBsK,UAAUrQ,EAAUoF,EAAMW,GAE3B7L,OAAAA,EACA4Z,EAAW9T,EAASG,EAAE4T,cACP,WAAfhc,KAAKwb,OAAqC,SAAfxb,KAAKwb,MAAAA,GACtBvT,EAASgL,KAAK4I,OAAAA,GAEd7b,KAAKwb,MAAAA,EAGfxb,KAAK+X,QAAUuD,GACRrT,EAASG,EAAEjG,SAAW,IAEtBnC,KAAK+X,MAAAA,EAGP9E,KAAK6I,QAAQ9W,EAAI7C,EAAS/B,KAAKqC,IAAIsZ,GAAAA,EACnC9I,KAAK6I,QAAQvZ,EAAIJ,EAAS/B,KAAKuC,IAAIoZ,GAAAA,EACnC9I,KAAK6I,QAAU9b,KAAKqY,eAAepQ,EAASgL,KAAK6I,SAAAA,EACjD5b,EAAEqK,IAAItC,EAASgL,KAAK6I,aAAAA,IAAAA,SAAAA,GA7FnBN,EAAOzD,EAAOxF,EAAMO,GAClBA,OADkBA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACxBP,EAAMO,KACP8I,iBAAiBJ,EAAOzD,GAAAA,EACxB3M,KAAO,UAAAlL,EAAA,ICtBK+b,IAAAA,EAAAA,GAAkB1D,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SA2ChCC,EAAgBT,EAAOnF,EAAQL,EAAMO,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAC9B0F,EAAgBT,EAAOnF,EAAQL,EAAMO,GAAAA,KAC5CiF,QAAU,MAAAmE,IAAA,YAxBJ1D,EAAgBT,EAAOnF,EAAQL,EAAMO,GACLA,OADKA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KAC1C0F,EAAgBT,EAAOnF,EAAQL,EAAMO,KAEtCiF,QAAU,EAAA/L,EACVZ,KAAO,YAAAY,EAAA,ICvBOmQ,IAAAA,EAAAA,GAAoBrE,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAqClCsE,EAAarE,EAAOxF,EAAMO,GAAAA,KAC1BuJ,YAAc,IAAI1K,EAAAA,KAClByK,YAAcxa,EAAKM,UAAUka,EAAa,IAAIzK,GAAAA,KAC9CoG,MAAQnW,EAAKM,UAAUlC,KAAKyY,eAAeV,GAAQ,KAAA7W,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAEpCqR,EAAMO,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,cAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAoBZ7K,EAAUoF,GAAAA,KACnBgP,YAAY/M,IAAItP,KAAKoc,YAAYpX,EAAIiD,EAASrF,EAAEoC,EAAGhF,KAAKoc,YAAY7Z,EAAI0F,EAASrF,EAAEL,GAAAA,IAKjF+Z,EAJDC,EAAavc,KAAKqc,YAAYzD,WAEjB,IAAf2D,IACGzC,EAAW9Z,KAAKqc,YAAYla,SAC5Bma,EAAUtc,KAAK+X,MAAQ1K,GAASkP,EAAazC,GAAAA,EAE1C1R,EAAEpD,GAAKsX,EAAStc,KAAKqc,YAAYrX,EAAAA,EACjCoD,EAAE7F,GAAK+Z,EAAStc,KAAKqc,YAAY9Z,OAAAA,IAAAA,SAAAA,GAxDhC6Z,EAAarE,EAAOxF,EAAMO,GACzBA,OADyBA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KAC/BP,EAAMO,KAEPuJ,YAAc,IAAI1K,EAAAA,EAClByK,YAAcxa,EAAKM,UAAUka,EAAa,IAAIzK,GAAAA,EAC9CoG,MAAQnW,EAAKM,UAAU2J,EAAK4M,eAAeV,GAAQ,KAAA7X,EAEnDkL,KAAO,cAAAlL,ECtBd,OAAe,CAAAsT,WAAAA,SACFhJ,EAASvC,EAAUgD,GAAAA,IACtB9I,EAAS8I,EAAY9I,OACvBjB,OAAAA,EAFwB+J,IAIvB/J,EAAI,EAAGA,EAAIiB,EAAQjB,IAClB+J,EAAY/J,aAAcgV,EAAAA,EAChBhV,GAAG6M,KAAKvD,EAASvC,GAAAA,KAExB8F,KAAKvD,EAASvC,EAAUgD,EAAY/J,IAAAA,KAIxCsb,YAAYhS,EAASvC,IAAAA,KAAAA,SAIvBuC,EAASvC,EAAUuL,GAAAA,EACjBK,QAAQ5L,EAAUuL,GAAAA,EAClBiJ,aAAaxU,EAAUuL,IAAAA,YAAAA,SAGlBhJ,EAASvC,GACfuC,EAAQgS,cAAAA,EACD5Z,EAAE2H,IAAIC,EAAQ5H,GAAAA,EACdwF,EAAEmC,IAAIC,EAAQpC,GAAAA,EACdlI,EAAEqK,IAAIC,EAAQtK,GAAAA,EAEdkI,EAAElD,OAAOvF,EAAS+c,gBAAgBlS,EAAQqI,cCxBpC8J,IAAAA,EAAAA,GAAgBrK,GAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SA2D9BsK,EAAWrK,GAAAA,KACTsK,QAAAA,EAAS,KACTC,SAAW,OACXF,UAAYhb,EAAKM,UAAU0a,EAAW3c,EAAAA,IAAAA,IAEvCsS,GAA0B,SAATA,GAA4B,YAATA,EAAAA,KACjCA,KAAqB,SAAdqK,EAAuB,EAAI5c,KAAK4c,UAClCG,MAAMxK,KAAAA,KACXA,KAAOA,GAAAA,KAGTyK,KAAKjP,SAAAA,CAAAA,IAAAA,OAAAA,MAAAA,WAAAA,KAQL6O,WAAa,OACbE,SAAW,OACXD,QAAAA,IAAS,CAAAxX,IAAAA,UAAA/D,MAAAA,SAGR+L,GAAAA,IACF4P,EAAYjd,KAAK6c,OACjBK,EAAcld,KAAK8c,SACnBK,EAAend,KAAK4c,UAKd7O,IALc6O,KAEnBC,QAAAA,EAAS,KACTC,SAAW,OACXF,UAAYvP,EAAAA,KACZ2P,KAAKjP,OAEG,MACNV,GAAAA,GADM,WAGN6B,OAHM,YAMR2N,OAASI,EAAAA,KACTH,SAAWI,EAAc9c,KAAKgT,IAAI/F,EAAM,QACxCuP,UAAYO,IAAAA,CAAAA,IAAAA,qBAAAA,MAAAA,WAAAA,IAAAA,IAQbjc,EAAIlB,KAAKoN,UAAUjL,OAChBjB,KAAAA,KAAUkM,UAAUlM,GAAGuR,MAAAA,IAAO,CAAApN,IAAAA,oBAAA/D,MAAAA,SAOrBkS,GACZA,EAAAA,KAAAA,EACSzF,KAAK/N,MAAAA,KAEXod,YAAAA,CAAAA,IAAAA,gBAAAA,MAAAA,WAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAWQC,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAAAA,IAAAA,IACXnc,EAAImc,EAAKlb,OACNjB,KAAAA,KAAU+J,YAAYlB,KAAKsT,EAAKnc,MAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAQxBoc,IAEF,GADPtP,EAAQhO,KAAKiL,YAAYrD,QAAQ0V,KACvBtd,KAAKiL,YAAY4B,OAAOmB,EAAO,MAAA3I,IAAAA,wBAAA/D,MAAAA,WAAAoS,EAQ1CC,WAAW3T,KAAKiL,eAAAA,CAAAA,IAAAA,eAAAA,MAAAA,WAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAUPoS,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAAAA,IAAAA,IACVnc,EAAIqc,UAAUpb,OACXjB,KAAK,KACNoS,EAAY+J,EAAKnc,GAAAA,KAChBiK,WAAWpB,KAAKuJ,GACjBA,EAAUC,SAASD,EAAUC,QAAQxJ,KAAK/J,SAAAA,CAAAA,IAAAA,kBAAAA,MAAAA,SASlCsT,GAAAA,IACVtF,EAAQhO,KAAKmL,WAAWvD,QAAQ0L,GAAAA,OAAAA,KAC/BnI,WAAW0B,OAAOmB,EAAO,GAE1BsF,EAAUC,UAAAA,EACJD,EAAUC,QAAQ3L,QAAQ0L,GAAAA,EACxBC,QAAQ1G,OAAOmB,EAAO,IAG3BA,IAAAA,CAAAA,IAAAA,sBAAAA,MAAAA,WAAAA,EAQF2F,WAAW3T,KAAKmL,cAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAIhBkC,GAAAA,KACAmF,KAAOnF,GACRrN,KAAKwS,KAAOxS,KAAKuS,MAAQvS,KAAKyS,OAAMzS,KAAK2I,UAAAA,KAExC6U,SAASnQ,GAAAA,KACToQ,UAAUpQ,KAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAGPA,GAAAA,GACHrN,KAAKkO,OAAAA,CAAAA,IAEJZ,EAAU,EAAItN,KAAKsN,QAAAA,KACpBY,OAAO0B,WAAW0I,UAAUtY,KAAMqN,EAAMC,GAAAA,IAGzCpM,OAAAA,EAAG+G,OAAAA,EAHsCqF,IAKxCpM,EAHUlB,KAAKoN,UAAUjL,OAGZ,EAAQ,GAALjB,EAAQA,KAAAA,EAChBlB,KAAKoN,UAAUlM,IAGjBgO,OAAO7B,EAAMnM,GAAAA,KACjBgN,OAAO0B,WAAW0I,UAAUrQ,EAAUoF,EAAMC,GAAAA,KAC5CoQ,SAAS,kBAAmBzV,GAG7BA,EAASwK,OAAAA,KACNiL,SAAS,gBAAiBzV,GAAAA,KAE1BiG,OAAO3C,KAAKoS,OAAO1V,GAAAA,KACnBmF,UAAUP,OAAO3L,EAAG,QAAAmE,IAAAA,WAAA/D,MAAAA,SAKtBsc,EAAO9W,GAAAA,KACToH,QAAUlO,KAAKkO,OAAOlB,cAAc4Q,EAAO9W,GAAAA,KAC3C+W,WAAa7d,KAAKgN,cAAc4Q,EAAO9W,KAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAGrCuG,GAAAA,GACgB,SAAnBrN,KAAK4c,UAAsB,KACzB1b,OAAAA,EACEiB,EAASnC,KAAKgd,KAAK/a,SAAS,WAErB,EAATE,IAAYnC,KAAK+K,UAAY5I,GAC5BjB,EAAI,EAAGA,EAAIiB,EAAQjB,IAAAA,KAAU4c,iBAClC9d,KAAK4c,UAAY,oBAEZE,UAAYzP,EAEbrN,KAAK8c,SAAW9c,KAAK4c,UAAW,KAC5Bza,EAASnC,KAAKgd,KAAK/a,SAASoL,GAC9BnM,OAAAA,EAAAA,IAES,EAATiB,IAAYnC,KAAK+K,UAAY5I,GAC5BjB,EAAI,EAAGA,EAAIiB,EAAQjB,IAAAA,KAAU4c,oBAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAWzBtK,EAAYF,GAAAA,IACnBrL,EAAWjI,KAAKkO,OAAO3C,KAAKiE,IAAI8C,GAAAA,OAAAA,KACjCyL,cAAc9V,EAAUuL,EAAYF,GAAAA,KACpCoK,SAAS,mBAAoBzV,GAE3BA,IAAAA,CAAAA,IAAAA,gBAAAA,MAAAA,SAGKA,EAAUuL,EAAYF,GAAAA,IAC9BrI,EAAcjL,KAAKiL,YACnBE,EAAanL,KAAKmL,WAElBqI,IAAYvI,EAAcrJ,EAAK4F,QAAQgM,IACvCF,IAAWnI,EAAavJ,EAAK4F,QAAQ8L,IAAAA,EAEhCN,QAAAA,GACMQ,WAAWxT,KAAMiI,EAAUgD,GAAAA,EACjC+S,cAAc7S,IAAAA,EACd+C,OAASlO,MAEboN,UAAUrD,KAAK9B,KAAAA,CAAAA,IAAAA,SAAAA,MAAAA,WAAAA,KAIfgW,OAAAA,EACA9O,WAAWnP,KAAKoN,aAAAA,CAAAA,IAAAA,UAAAA,MAAAA,WAAAA,KAQhBqF,MAAAA,EAAO,KACPxE,SAAAA,KACAiQ,wBAAAA,KACAhL,sBAAAA,KACAhF,QAAUlO,KAAKkO,OAAOiQ,cAAcne,UAAAA,IAAAA,SAAAA,KAAAA,IA/R/BkI,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAO,GACXA,OADW/G,EAAAA,KAAAA,KAAAC,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACX8G,KAEDkF,UAAY,GAAAhM,EACZ+J,WAAa,GAAA/J,EACb6J,YAAc,GAAA7J,EAEd0b,SAAW,EAAA1b,EACX2J,UAAY,EAAA3J,EACZwb,WAAa,EAAAxb,EAQbkM,QAAU,KAAAlM,EAQVob,aAAAA,EAAcpb,EAQd4b,KAAO,IAAIvH,EAAK,EAAG,IAAArU,EAEnBgK,KAAO,UAAAhK,EACP8C,GAAK6E,EAAK7E,GAAG2H,EAAKT,MAAAA,EAAAA,EA+PXtD,KAAK6U,IAAAA,ICvTAyB,IAAAA,EAAAA,GAAyBzB,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,WAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAsBxBU,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAAAA,IACdnc,OAAAA,EACFiB,EAASkb,EAAKlb,OAFEkb,IAIbnc,EAAI,EAAGA,EAAIiB,EAAQjB,IAAK,KACvBoS,EAAY+J,EAAKnc,GAAAA,KAChBmd,eAAetU,KAAKuJ,GAAAA,EACfE,WAAWxT,SAAAA,CAAAA,IAAAA,sBAAAA,MAAAA,SASLsT,IAEL,GADPtF,EAAQhO,KAAKqe,eAAezW,QAAQ0L,KAC1BtT,KAAKqe,eAAexR,OAAOmB,EAAO,MAAA3I,IAAAA,SAAA/D,MAAAA,SAG7C+L,GAAAA,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,SAAAA,MAAAA,KAAAA,KACQA,IAERrN,KAAKwN,MAAAA,CAAAA,IACFrL,EAASnC,KAAKqe,eAAelc,OAC/BjB,OAAAA,EAFIsM,IAIHtM,EAAI,EAAGA,EAAIiB,EAAQjB,IAAAA,KACjBmd,eAAend,GAAGmS,eAAerT,KAAMqN,EAAMnM,QAAAA,IAAAA,SAAAA,GA1C5CgH,GACJA,OADIA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACJA,KAEDmW,eAAiB,GAAAjd,EAAA,ICXLkd,IAAAA,EAAAA,GAAsB3B,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,WAAAA,IAAAA,EAAAA,KAAAA,KAwBlC4B,iBAAmB,mBAAKC,EAAKC,UAAUnX,KAAKkX,EAAM3X,IAAAA,KAClD6X,iBAAmB,mBAAKF,EAAKG,UAAUrX,KAAKkX,EAAM3X,IAAAA,KAClD+X,eAAiB,mBAAKJ,EAAKK,QAAQvX,KAAKkX,EAAM3X,IAAAA,KAE9CiY,YAAYlT,iBACf,YACA5L,KAAKue,kBAAAA,KACL,CAAAlZ,IAAAA,OAAA/D,MAAAA,WAAA,KASGyd,gBAAAA,IAAiB,CAAA1Z,IAAAA,OAAA/D,MAAAA,WAAA,KAQjByd,gBAAAA,IAAiB,CAAA1Z,IAAAA,YAAA/D,MAAAA,SAGduF,GACJA,EAAEmY,QAAuB,IAAbnY,EAAEmY,QAAAA,KACXpc,EAAEoC,IAAM6B,EAAEmY,OAAShf,KAAK4C,EAAEoC,GAAKhF,KAAK0R,KAAAA,KACpC9O,EAAEL,IAAMsE,EAAEoY,OAASjf,KAAK4C,EAAEL,GAAKvC,KAAK0R,OAChC7K,EAAEqY,SAAyB,IAAdrY,EAAEqY,UAAAA,KACnBtc,EAAEoC,IAAM6B,EAAEqY,QAAUlf,KAAK4C,EAAEoC,GAAKhF,KAAK0R,KAAAA,KACrC9O,EAAEL,IAAMsE,EAAEsY,QAAUnf,KAAK4C,EAAEL,GAAKvC,KAAK0R,MAGxC1R,KAAK+e,gBAAgBK,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,OAAAA,MAAAA,KAAAA,KAAW,WAAA/Z,IAAAA,UAAA/D,MAAAA,WAAA2Y,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,UAAAA,MAAAA,KAAAA,MAAAA,KAS/B6E,YAAYlS,oBACf,YACA5M,KAAKue,kBAAAA,OACLc,IAAA,YA3DQP,EAAapN,EAAMxJ,GACvBA,OADuBA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACvBA,KAED4W,YAAcld,EAAKM,UAAU4c,EAAaQ,QAAAA,EAC1C5N,KAAO9P,EAAKM,UAAUwP,EAAM,IAAAxQ,EAE5B6d,gBAAAA,EAAiB7d,EACjBqe,mBAAAA,EAAAA,ICrBYC,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAAAA,EAAAA,GAWPzT,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAQ,UAAW0T,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EAAY,OAChCC,OAAS,CAAE3T,MAAAA,EAAO0T,UAAAA,KAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,IAAAA,EAAAA,KAAAA,KAIlBE,qBAAuB,WAAA9Y,EACnB+Y,eAAetY,KAAKuE,IAAAA,KAGxBgU,0BAA4B,WAAAhZ,EACxBiZ,oBAAoBxY,KAAKuE,IAAAA,KAG7BkU,qBAAuB,YAAAlZ,EACnBmZ,eAAe1Y,KAAKuE,EAAMrB,IAAAA,KAG9ByV,uBAAyB,YAAApZ,EACrBqZ,iBAAiB5Y,KAAKuE,EAAMrB,IAAAA,KAGhC2V,wBAA0B,YAAAtZ,EACtBuZ,kBAAkB9Y,KAAKuE,EAAM5D,IAAAA,KAGjCoY,uBAAyB,YAAAxZ,EACrByZ,iBAAiBhZ,KAAKuE,EAAM5D,IAAAA,KAGhCsY,qBAAuB,YAAA1Z,EACnB2Z,eAAelZ,KAAKuE,EAAM5D,MAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAIlC4C,IAAAA,KACIqD,OAASrD,GAEPe,iBAAiB,gBAAiB5L,KAAK2f,sBAAAA,EACvC/T,iBACH,sBACA5L,KAAK6f,2BAAAA,EAGFjU,iBAAiB,gBAAiB5L,KAAK+f,sBAAAA,EACvCnU,iBAAiB,kBAAmB5L,KAAKigB,wBAAAA,EAEzCrU,iBACH,mBACA5L,KAAKmgB,yBAAAA,EAEFvU,iBAAiB,kBAAmB5L,KAAKqgB,wBAAAA,EACzCzU,iBAAiB,gBAAiB5L,KAAKugB,wBAAAA,CAAAA,IAAAA,SAAAA,MAAAA,cAAAA,CAAAA,IAAAA,UAAAA,MAAAA,WAAAA,KAMzCtS,WAAAA,CAAAA,IAAAA,SAAAA,MAAAA,WAAAA,KAIAC,OAAOtB,oBACR,gBACA5M,KAAK2f,sBAAAA,KAEJzR,OAAOtB,oBACR,sBACA5M,KAAK6f,2BAAAA,KAGJ3R,OAAOtB,oBACR,gBACA5M,KAAK+f,sBAAAA,KAEJ7R,OAAOtB,oBACR,kBACA5M,KAAKigB,wBAAAA,KAGJ/R,OAAOtB,oBACR,mBACA5M,KAAKmgB,yBAAAA,KAEJjS,OAAOtB,oBACR,kBACA5M,KAAKqgB,wBAAAA,KAEJnS,OAAOtB,oBACR,gBACA5M,KAAKugB,sBAAAA,KAGJrS,OAAS,QAAA7I,IAAAA,iBAAA/D,MAAAA,cAAA,CAAA+D,IAAAA,sBAAA/D,MAAAA,cAAA,CAAA+D,IAAAA,iBAAA/D,MAAAA,cAAA,CAAA+D,IAAAA,mBAAA/D,MAAAA,cAAA,CAAA+D,IAAAA,oBAAA/D,MAAAA,cAAA,CAAA+D,IAAAA,mBAAA/D,MAAAA,cAAA,CAAA+D,IAAAA,iBAAA/D,MAAAA,gBAAAmf,IAAA,YAtGNC,EAAShB,GAAAA,EAAAA,KAAAA,IAAAA,KACZnU,KAAO,IAAIhC,EAAAA,KACXmX,QAAUA,EAAAA,KACVhB,OAASA,EAAAA,KACTiB,WAAa,CAAEC,UAAU,QAEzBC,cAAAA,KACAzV,KAAO,mBCLC0V,IAAAA,EAAAA,GAAuBtB,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAUjCrb,EAAOC,GAAAA,KACLsc,QAAQvc,MAAQA,EAAAA,KAChBuc,QAAQtc,OAASA,IAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,WAAAA,KAIjB2B,QAAQM,UAAU,EAAG,EAAGrG,KAAK0gB,QAAQvc,MAAOnE,KAAK0gB,QAAQtc,UAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,SAGhD6D,GACVA,EAASqC,KAAAA,EACerC,EAASqC,KAAMtK,KAAK+gB,YAAa9Y,GAAAA,EAEhD8D,MAAQ9D,EAAS8D,OAAS,aAAA1G,IAAAA,mBAAA/D,MAAAA,SAI1B2G,GACTA,EAASqC,KACLrC,EAASqC,gBAAgB5D,OAAO1G,KAAKkG,UAAU+B,GAAAA,KAE9C+Y,WAAW/Y,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAITA,GAAAA,EACFqC,KAAO,QAAAjF,IAAAA,cAAA/D,MAAAA,SAIRgF,EAAK2B,GAAAA,EACJqC,KAAOhE,IAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAIV2B,GAAAA,IAUIgZ,EATJpP,EAAK5J,EAASqC,KAAKnG,MAAQ8D,EAAShD,MAAS,EAC7C8O,EAAK9L,EAASqC,KAAKlG,OAAS6D,EAAShD,MAAS,EAC9CD,EAAIiD,EAASrF,EAAEoC,EAAI6M,EAAI,EACvBtP,EAAI0F,EAASrF,EAAEL,EAAIwR,EAAI,EAEvB9L,EAAS8D,OACN9D,EAASgL,KAAThL,SACDA,EAASgL,KAAKiO,OAASlhB,KAAKmhB,aAAalZ,EAASqC,QAEhD2W,EAAahZ,EAASgL,KAAKiO,OAAOha,WAAW,OACxCb,UACP,EACA,EACA4B,EAASgL,KAAKiO,OAAO/c,MACrB8D,EAASgL,KAAKiO,OAAO9c,QAAAA,EAEdgd,YAAcnZ,EAASoK,MAAAA,EACvBnM,UAAU+B,EAASqC,KAAM,EAAG,GAAAzD,EAE5Bwa,yBAA2B,cAAAxa,EAC3Bya,UAAYlG,EAAUjH,SAASlM,EAAS8K,KAAAA,EACxCwO,SACP,EACA,EACAtZ,EAASgL,KAAKiO,OAAO/c,MACrB8D,EAASgL,KAAKiO,OAAO9c,QAAAA,EAEdid,yBAA2B,cAAAxa,EAC3Bua,YAAc,OAEpBrb,QAAQG,UACT+B,EAASgL,KAAKiO,OACd,EACA,EACAjZ,EAASgL,KAAKiO,OAAO/c,MACrB8D,EAASgL,KAAKiO,OAAO9c,OACrBY,EACAzC,EACAsP,EACAkC,KAAAA,KAGChO,QAAQyb,OAAAA,KAERzb,QAAQqb,YAAcnZ,EAASoK,MAAAA,KAC/BtM,QAAQ0b,UAAUxZ,EAASrF,EAAEoC,EAAGiD,EAASrF,EAAEL,GAAAA,KAC3CwD,QAAQb,OAAOvF,EAAS+c,gBAAgBzU,EAAS4K,WAAAA,KACjD9M,QAAQ0b,WAAWxZ,EAASrF,EAAEoC,GAAIiD,EAASrF,EAAEL,GAAAA,KAC7CwD,QAAQG,UACT+B,EAASqC,KACT,EACA,EACArC,EAASqC,KAAKnG,MACd8D,EAASqC,KAAKlG,OACdY,EACAzC,EACAsP,EACAkC,GAAAA,KAGChO,QAAQqb,YAAc,OACtBrb,QAAQ2b,aAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAKVzZ,GACHA,EAAS8K,IAAAA,KACJhN,QAAQub,UAAAA,QAAoBrZ,EAAS8K,IAAI/G,EAAAA,IAAK/D,EAAS8K,IAAInM,EAAAA,IAAKqB,EAAS8K,IAAI5S,EAAAA,IAAK8H,EAASoK,MAAAA,IAAAA,KAE3FtM,QAAQub,UAAYrZ,EAAS8D,MAAAA,KAIjChG,QAAQ4b,YAAAA,KACR5b,QAAQ6b,IACT3Z,EAASrF,EAAEoC,EACXiD,EAASrF,EAAEL,EACX0F,EAAS2K,OACT,EACU,EAAVxS,KAAKV,IAAAA,GAILM,KAAK0f,SAAAA,KACA3Z,QAAQ8b,YAAc7hB,KAAK0f,OAAO3T,MAAAA,KAClChG,QAAQ+b,UAAY9hB,KAAK0f,OAAOD,UAAAA,KAChC1Z,QAAQ2Z,UAAAA,KAGZ3Z,QAAQgc,YAAAA,KACRhc,QAAQic,SAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAIJhc,GAAAA,GACLA,aAAiBU,MAAO,KAClBub,EAAOjc,EAAM7B,MAAQ,IAAM6B,EAAM5B,OACnC2C,EAAS/G,KAAKkiB,YAAYD,GAAAA,OAEzBlb,KAAAA,EACQxC,SAASC,cAAc,WACzBL,MAAQ6B,EAAM7B,MAAAA,EACdC,OAAS4B,EAAM5B,OAAAA,KACjB8d,YAAYD,GAAQlb,GAGtBA,OAAAA,IAAAA,SAAAA,GAxJH2Z,GACFA,OADEA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACFA,KAEDhB,OAAS,KAAAte,EACT2E,QAAU8F,EAAK6U,QAAQxZ,WAAW,MAAA9F,EAClC8gB,YAAc,GAAA9gB,EACdgK,KAAO,iBAAAhK,EAAA,ICRC+gB,IAAAA,EAAAA,GAAoB3C,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,SAYrBvX,GACZA,EAASqC,KAAAA,EACarC,EAASqC,KAAMtK,KAAK+gB,YAAa9Y,IAAAA,EAEhDqC,KAAOtK,KAAKuL,KAAKiE,IAAIxP,KAAK2gB,WAAY1Y,GAAAA,KAC1CyY,QAAQxU,YAAYjE,EAASqC,SAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAIrBrC,GACXjI,KAAKoiB,UAAUna,KACbjI,KAAKqiB,YACPpb,EAAQob,YACNpa,EAASqC,KACTrC,EAASrF,EAAEoC,EACXiD,EAASrF,EAAEL,EACX0F,EAAShD,MACTgD,EAAS4K,UAGX5L,EAAQtC,UACNsD,EAASqC,KACTrC,EAASrF,EAAEoC,EACXiD,EAASrF,EAAEL,EACX0F,EAAShD,MACTgD,EAAS4K,UAAAA,EAGJvI,KAAK7F,MAAMC,QAAUuD,EAASoK,MACnCpK,EAASqC,KAAKsW,WAAAA,EACPtW,KAAK7F,MAAM6d,gBAAkBra,EAAS8D,OAAS,eAAA1G,IAAAA,iBAAA/D,MAAAA,SAK/C2G,GACTjI,KAAKoiB,UAAUna,KAAAA,KACZyY,QAAQ6B,YAAYta,EAASqC,MAAAA,KAC7BiB,KAAKoS,OAAO1V,EAASqC,MAAAA,EACjBA,KAAO,SAAAjF,IAAAA,YAAA/D,MAAAA,SAIV2G,GAAAA,MAEmB,WAAzBua,EAAOva,EAASqC,OAChBrC,EAASqC,OACRrC,EAASqC,KAAKhB,UAAAA,CAAAA,IAAAA,cAAAA,MAAAA,SAKPhD,EAAK2B,GACXA,EAASwK,OAAAA,EACJnI,KAAOtK,KAAKuL,KAAKiE,IAAIlJ,EAAK2B,GAAAA,EAC3BrD,OAAOqD,EAASqC,KAAMhE,EAAInC,MAAOmC,EAAIlC,QAAAA,KAExCsc,QAAQxU,YAAYjE,EAASqC,SAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAGzBA,EAAMrC,GAAAA,OACXqC,EAAKsW,SAAiB5gB,KAAKyiB,aAAaxa,GAChCjI,KAAK0iB,aAAapY,EAAMrC,KAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAIzBA,GAAAA,IACL3D,EAAM2C,EAAQ0b,UACf1a,EAAS/D,GAAAA,OACZ,EAAI+D,EAAS2K,OACb,EAAI3K,EAAS2K,QAAAA,OAAAA,EAEXnO,MAAMme,aAAkB3a,EAAS2K,OAAAA,KAEjC5S,KAAK0f,SAAAA,EACHjb,MAAMoe,YAAc7iB,KAAK0f,OAAO3T,MAAAA,EAChCtH,MAAMqe,YAAiB9iB,KAAK0f,OAAOD,UAAAA,MAAAA,EAErCmB,UAAAA,EAEGtc,IAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAGIgG,EAAMrC,GAAAA,IACX8a,EAAsB,iBAATzY,EAAoBA,EAAOA,EAAK7D,IAI5CrC,OAHDE,EAAM2C,EAAQ0b,UACf1a,EAAS/D,GAAAA,OACZoG,EAAKnG,MACLmG,EAAKlG,SAEHK,MAAMue,gBAAAA,OAAyBD,EAAAA,IAE5Bze,MAAAA,IAAAA,SAAAA,GAvGGoc,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACJA,IAAAA,OAAAA,EAEDhB,OAAS,KAAAxe,EACTqK,KAAKtB,OAAS,SAACK,EAAMrC,GAAAA,OAAa4D,EAAKoX,WAAW3Y,EAAMrC,IAAAA,EACxD8Y,YAAclV,EAAKkV,YAAYjZ,KAAAA,GAAAA,EAE/Bua,aAAAA,EAAcnhB,EACdkK,KAAO,cAAAlK,EAAA,ICXKgiB,IAAAA,EAAAA,GAAsB1D,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,SAQvBvX,GACZA,EAASqC,KAAAA,KACNoY,aAAaza,GAAAA,KAEbwa,aAAaxa,GAAAA,KAGfyY,QAAQyC,SAASlb,EAASqC,QAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAGhBrC,GACXA,EAASqC,OAAAA,EACFA,KAAKtF,EAAIiD,EAASrF,EAAEoC,EAAAA,EACpBsF,KAAK/H,EAAI0F,EAASrF,EAAEL,EAAAA,EAEpB+H,KAAK+H,MAAQpK,EAASoK,MAAAA,EACtB/H,KAAK8Y,OAASnb,EAASqC,KAAK+Y,OAASpb,EAAShD,MAAAA,EAC9CqF,KAAKuI,SAAW5K,EAAS4K,YAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAIvB5K,GACTA,EAASqC,OAAAA,EACFA,KAAK4D,QAAUjG,EAASqC,KAAK4D,OAAOqU,YAAYta,EAASqC,MAAAA,KAC7DiB,KAAKoS,OAAO1V,EAASqC,MAAAA,EACjBA,KAAO,MAGdrC,EAASqb,UAAUtjB,KAAKuL,KAAKoS,OAAO1V,EAASqb,YAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAItCrb,GAAAA,EACFqC,KAAOtK,KAAKuL,KAAKiE,IAAIvH,EAASqC,MAEnCrC,EAASqC,KAAK4D,QACdjG,EAASqC,KAATrC,QAAAA,EACOqC,KAAKiZ,KAAOtb,EAASqC,KAAKtE,MAAM7B,MAAQ,EAAA/C,EACxCkJ,KAAKkZ,KAAOvb,EAASqC,KAAKtE,MAAM5B,OAAS,MAAAiB,IAAAA,eAAA/D,MAAAA,SAIzC2G,GAAAA,IACLqb,EAAWtjB,KAAKuL,KAAKiE,IAAIiU,SAASC,UAEpC1jB,KAAK0f,SACH1f,KAAK0f,kBAAkBhE,OAAQ4H,EAASK,YAAY3jB,KAAK0f,QACxD4D,EAASK,YAAY,YAAA9c,EAGzB+c,UAAU3b,EAAS8D,OAAS,WAC5BiV,WAAW,EAAG,EAAG/Y,EAAS2K,QAAAA,IAEvBiR,EAAQ7jB,KAAKuL,KAAKiE,IAAIiU,SAASK,MAAO,CAACR,IAAAA,EAEpChZ,KAAOuZ,EAAAA,EACPP,SAAWA,MAAAA,IAAAA,SAAAA,GA/DV5C,EAAShB,GACbgB,OADahB,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACbgB,KAEDhB,OAASA,EAAAA,EACTtU,KAAO,gBAAAhK,EAAA,ICJK2iB,IAAAA,EAAAA,GAAsBvE,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAalCrb,EAAOC,GAAAA,KACPsc,QAAQvc,MAAQA,EAAAA,KAChBuc,QAAQtc,OAASA,IAAAA,CAAAA,IAAAA,kBAAAA,MAAAA,SAGR4f,GAAAA,KACTA,UAAYA,GAEb,IAAI1O,EAAU,EAAG,EAAGtV,KAAK0gB,QAAQvc,MAAOnE,KAAK0gB,QAAQtc,QAAAA,KACpD6f,UAAYjkB,KAAK+F,QAAQme,gBAC5BlkB,KAAKgkB,UAAU7f,MACfnE,KAAKgkB,UAAU5f,QAAAA,KAEZ2B,QAAQoe,aACXnkB,KAAKikB,UACLjkB,KAAKgkB,UAAUhf,EACfhF,KAAKgkB,UAAUzhB,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,WAAAA,KAKZwD,QAAQM,UACXrG,KAAKgkB,UAAUhf,EACfhF,KAAKgkB,UAAUzhB,EACfvC,KAAKgkB,UAAU7f,MACfnE,KAAKgkB,UAAU5f,QAAAA,KAEZ6f,UAAYjkB,KAAK+F,QAAQK,aAC5BpG,KAAKgkB,UAAUhf,EACfhF,KAAKgkB,UAAUzhB,EACfvC,KAAKgkB,UAAU7f,MACfnE,KAAKgkB,UAAU5f,UAAAA,CAAAA,IAAAA,sBAAAA,MAAAA,WAAAA,KAKZ2B,QAAQoe,aACXnkB,KAAKikB,UACLjkB,KAAKgkB,UAAUhf,EACfhF,KAAKgkB,UAAUzhB,KAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,cAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAMF0F,GACXjI,KAAKikB,WAAAA,KACFG,SACHpkB,KAAKikB,UACL7jB,KAAKC,MAAM4H,EAASrF,EAAEoC,EAAIhF,KAAKgkB,UAAUhf,GACzC5E,KAAKC,MAAM4H,EAASrF,EAAEL,EAAIvC,KAAKgkB,UAAUzhB,GACzC0F,KAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAKG9B,EAAWnB,EAAGzC,EAAG0F,GAAAA,IAClB8K,EAAM9K,EAAS8K,IACjB/N,EAAI,GAAKA,EAAIhF,KAAK0gB,QAAQvc,OAAS5B,EAAI,GAAKA,EAAIvC,KAAKqkB,eAGnDnjB,EAA8C,IAAxCqB,GAAK,GAAK4D,EAAUhC,OAASa,GAAK,IAAA5D,EAEpC6R,KAAK/R,GAAK6R,EAAI/G,EAAAA,EACdiH,KAAS,EAAJ/R,GAAS6R,EAAInM,EAAAA,EAClBqM,KAAS,EAAJ/R,GAAS6R,EAAI5S,EAAAA,EAClB8S,KAAS,EAAJ/R,GAA0B,IAAjB+G,EAASoK,SAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,gBAAAA,IAAAA,SAAAA,GA9EvBqO,EAASsD,GACbtD,OADasD,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACbtD,KAED3a,QAAU8F,EAAK6U,QAAQxZ,WAAW,MAAA9F,EAClC6iB,UAAY,KAAA7iB,EACZ4iB,UAAY,KAAA5iB,EACZ4iB,UAAYA,EAAAA,EACZE,gBAAgBF,GAAAA,EAEhB5Y,KAAO,gBAAAhK,ECThB,IAAIkjB,QAAAA,EACiBC,IAAAA,EAAAA,GAAqB/E,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,UAAAA,MAAAA,SAchCgF,GAAAA,IAAAA,GAEQA,GAAQ,CAAEC,OAAQ,SACzBC,gBACHJ,GAAUG,OAAOE,MAAQL,GAAUG,OAAOG,UAC5C,MAAO/d,OAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,cAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,SAQOoB,GACZA,EAASqC,KAAAA,EACFA,KAAOtK,KAAKuL,KAAKiE,IAAIvH,EAASqC,KAAMrC,GAAAA,EAEpCqC,KAAOtK,KAAKuL,KAAKiE,IAAIxP,KAAK2gB,WAAY1Y,GAG7CjI,KAAK6kB,YAAAA,EACEva,KAAKua,UAAY7kB,KAAK6kB,WAAAA,KAG5BnE,QAAQyC,SAASlb,EAASqC,QAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAMhBrC,GAAAA,KACVtD,UAAUsD,EAAUA,EAASqC,OAAAA,IAE9BtK,KAAK8kB,WAAAA,IAAqB9kB,KAAK+L,QAAAA,EACxBzB,KAAKya,KAAO3J,EAAU4J,qBAAqB/c,MAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAOzCA,GAAAA,KACRyY,QAAQ6B,YAAYta,EAASqC,MAAAA,KAC7BiB,KAAKoS,OAAO1V,EAASqC,MAAAA,EACjBA,KAAO,QAAAjF,IAAAA,UAAA/D,MAAAA,SAGV8L,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,UAAAA,MAAAA,KAAAA,MAAAA,KAED7B,KAAK5C,UAAAA,IAAAA,IAENzH,EAAIkM,EAAUjL,OACXjB,KAAK,KACN+G,EAAWmF,EAAUlM,GACrB+G,EAASqC,MAAAA,KACNoW,QAAQ6B,YAAYta,EAASqC,SAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAK9BrC,EAAUnB,GAAAA,EACX9B,EAAIiD,EAASrF,EAAEoC,EAAAA,EACfzC,EAAI0F,EAASrF,EAAEL,EAAAA,EAEf8P,MAAQpK,EAASoK,MAAAA,EAEjBpN,MAAMD,EAAIiD,EAAShD,MAAAA,EACnBA,MAAM1C,EAAI0F,EAAShD,MAAAA,EAGnB4N,SAAW5K,EAAS4K,SAAWlT,EAASC,SAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAGtC0K,EAAMrC,GAAAA,OACXqC,EAAKsW,SAAiB5gB,KAAKyiB,aAAaxa,GAChCjI,KAAK0iB,aAAapY,KAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAGnBA,GAGcA,OAFnBoI,EAASpI,EAAKhB,QAChBtJ,KAAK0kB,gBAAgBpa,EAAK7D,KAC1B,IAAI6d,GAAUG,OAAOna,IAElB2a,OAAOjgB,EAAI,GAAA5D,EACX6jB,OAAO1iB,EAAI,GAEXmQ,IAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAGIzK,GAAAA,IAIHyX,EAHF4D,EAAW,IAAIgB,GAAUZ,SAAAA,OAE3B1jB,KAAK0f,SACDA,EAAS1f,KAAK0f,kBAAkBhE,OAAS1b,KAAK0f,OAAS,EAAAxe,EACpDyiB,YAAYjE,IAAAA,EAGdkE,UAAU3b,EAAS8D,OAAS,OAAA7K,EAC5B8f,WAAW,EAAG,EAAG/Y,EAAS2K,QAAAA,EAC1BsS,UAEF5B,MAAAA,IAAAA,SAAAA,GAlHG5C,EAAShB,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACbgB,IAAAA,OAAAA,EAEDhB,OAASA,EAAAA,EACT3T,OAAAA,EAAQ7K,EACR4jB,UAAAA,EAAW5jB,EACX2jB,UAAY,KAAA3jB,EACZqK,KAAKtB,OAAS,SAACK,EAAMrC,GAAAA,OAAa4D,EAAKoX,WAAW3Y,EAAMrC,IAAAA,EACxDkd,QAAQ7F,OAAOkF,MAAAA,EAEfpZ,KAAO,eAAAlK,EAAA,ICdKkkB,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SASfpQ,EAAG9T,GACK,IAANA,EAASwT,EAAKpF,IAAI0F,EAAGhV,KAAKqlB,KAAK,IAC9B3Q,EAAK4Q,SAAStlB,KAAKqlB,KAAKnkB,EAAI,GAAI8T,EAAGhV,KAAKqlB,KAAKnkB,IAAAA,KAE7C+gB,KAAO7hB,KAAKgT,IAAIpT,KAAKiiB,KAAM/gB,EAAI,MAAAmE,IAAAA,OAAA/D,MAAAA,SAGjC0T,GACe,IAAdhV,KAAKiiB,KAAYvN,EAAKpF,IAAI0F,EAAGhV,KAAKqlB,KAAK,IACtC3Q,EAAK4Q,SAAStlB,KAAKqlB,KAAKrlB,KAAKiiB,KAAO,GAAIjN,EAAGhV,KAAKqlB,KAAKrlB,KAAKiiB,OAAAA,KAE1DA,SAAAA,CAAAA,IAAAA,MAAAA,MAAAA,WAIW,EAAZjiB,KAAKiiB,MAAUjiB,KAAKiiB,SAAAA,CAAAA,IAAAA,MAAAA,MAAAA,WAAAA,OAIjBjiB,KAAKqlB,KAAKrlB,KAAKiiB,KAAO,OAAAsD,IAAA,cAAApkB,EAAAA,KAAAA,IAAAA,KA1BxBkkB,KAAO,OAGP,IAAInkB,EAAAA,KAFJ+gB,KAAO,EAEI/gB,EAAI,GAAIA,IAAAA,KACjBmkB,KAAKtb,KAAK2K,EAAKzK,OAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KCErCub,SAAAA,GAEL9E,GACFA,OADEA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACFA,KAED+E,GAAK5Z,EAAK6U,QAAQxZ,WAAW,qBAAsB,CAAEwe,WAAW,EAAMC,SAAS,EAAOC,OAAO,IAC7F/Z,EAAK4Z,IAAIjP,MAAM,4CAAApV,EAEfykB,UAAAA,EACAC,eAAAA,EACAC,cAAAA,EACAC,cAAAA,EAEAP,GAAGQ,cAAcpa,EAAK4Z,GAAGS,UAAAA,EACzBT,GAAGU,UAAUta,EAAK4Z,GAAGW,UAAWva,EAAK4Z,GAAGY,qBAAAA,EACxCZ,GAAGa,OAAOza,EAAK4Z,GAAGc,OAAAA,EAElBxF,YAAclV,EAAKkV,YAAYjZ,KAAAA,GAAAA,EAE/BsD,KAAO,gBAAAhK,EC3BColB,SAAAA,GACP9F,GACJA,OADIA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,KACJA,KAEDtV,KAAO,iBAAAhK,EFE0C4K,EAAAA,GCEfwT,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,OAAAA,MAAAA,SAsBlC3U,GAAAA,EAAAA,GAAAA,UAAAA,WAAAA,OAAAA,eAAAA,GAAAA,WAAAA,OAAAA,MAAAA,KAAAA,KACUA,GAAAA,KACNjG,OAAO5E,KAAK0gB,QAAQvc,MAAOnE,KAAK0gB,QAAQtc,UAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAG1CD,EAAOC,GAAAA,KACLqiB,KAAK,IAAM,OACXA,KAAK,GAAK,OAEVC,KAAK,GAAK,EAAIviB,EAAAA,KACduiB,KAAK,GAAK,EAAItiB,EAAAA,KAEduiB,OAAOrX,IAAItP,KAAKymB,KAAM,QACtBE,OAAOrX,IAAItP,KAAK0mB,KAAM,QAEtBjB,GAAGmB,SAAS,EAAG,EAAGziB,EAAOC,GAAAA,KACzBsc,QAAQvc,MAAQA,EAAAA,KAChBuc,QAAQtc,OAASA,IAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAGbwO,GAAAA,KACJiU,gBAAkB7mB,KAAKyiB,aAAa7P,KAAAA,CAAAA,IAAAA,kBAAAA,MAAAA,WAAAA,MAIxB,CAAC,yBAA0B,kCAAmC,gCAAiC,qBAAsB,8BAA+B,uBAAwB,gBAAiB,8CAA+C,sCAAuC,iCAAkC,sBAAuB,KAAKjH,KAAK,SAAAtG,IAAAA,oBAAA/D,MAAAA,WAAA,MAKtV,CAAC,2BAA4B,8BAA+B,uBAAwB,8BAA+B,sBAAuB,2BAA4B,uBAAwB,gBAAiB,0DAA2D,mDAAoD,2BAA4B,KAAKqK,KAAK,SAAAtG,IAAAA,UAAA/D,MAAAA,WAAA,KAKhXqlB,OAAS,IAAIvB,GAAAA,KACbqB,KAAO/R,EAAKzK,OAAO,CAAC,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,SAC9Cyc,KAAOhS,EAAKzK,OAAO,CAAC,IAAS,EAAG,EAAG,EAAG,IAAS,EAAG,EAAG,EAAG,SACxD6c,eAAiB,MAAAzhB,IAAAA,gBAAA/D,MAAAA,SAGZylB,GAAAA,KACLtB,GAAGQ,cAAcjmB,KAAKylB,GAAGsB,MAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAGxBA,EAAGC,GAAAA,KACJvB,GAAGU,UAAUnmB,KAAKylB,GAAGsB,GAAI/mB,KAAKylB,GAAGuB,MAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAGhCvB,EAAI7a,EAAKqc,GAC8DC,OAAvEC,EAASF,EAAKxB,EAAG2B,aAAa3B,EAAG4B,iBAAmB5B,EAAG2B,aAAa3B,EAAGyB,eAAAA,EAE1EI,aAAaH,EAAQvc,GAAAA,EACrB2c,cAAcJ,GAEZ1B,EAAG+B,mBAAmBL,EAAQ1B,EAAGgC,gBAK/BN,GAAAA,MAJG1B,EAAGiC,iBAAiBP,IACnB,SAAA9hB,IAAAA,cAAA/D,MAAAA,WAAA,IAOLqmB,EAAiB3nB,KAAK4nB,UAAU5nB,KAAKylB,GAAIzlB,KAAK6nB,qBAAAA,GAC9CC,EAAe9nB,KAAK4nB,UAAU5nB,KAAKylB,GAAIzlB,KAAK+nB,mBAAAA,GAAmB,KAEhEC,SAAWhoB,KAAKylB,GAAGwC,gBAAAA,KACnBxC,GAAGyC,aAAaloB,KAAKgoB,SAAUF,GAAAA,KAC/BrC,GAAGyC,aAAaloB,KAAKgoB,SAAUL,GAAAA,KAC/BlC,GAAG0C,YAAYnoB,KAAKgoB,UAEpBhoB,KAAKylB,GAAG2C,oBAAoBpoB,KAAKgoB,SAAUhoB,KAAKylB,GAAG4C,cACpD7R,MAAM,qCAELiP,GAAG6C,WAAWtoB,KAAKgoB,UAAAA,KACnBA,SAASO,IAAMvoB,KAAKylB,GAAG+C,kBAAkBxoB,KAAKgoB,SAAU,wBACxDA,SAASS,IAAMzoB,KAAKylB,GAAG+C,kBAAkBxoB,KAAKgoB,SAAU,sBACxDvC,GAAGiD,wBAAwB1oB,KAAKgoB,SAASS,KAAAA,KACzChD,GAAGiD,wBAAwB1oB,KAAKgoB,SAASO,KAAAA,KAEzCP,SAASW,YAAc3oB,KAAKylB,GAAGmD,mBAAmB5oB,KAAKgoB,SAAU,aACjEA,SAASa,eAAiB7oB,KAAKylB,GAAGmD,mBAAmB5oB,KAAKgoB,SAAU,iBACpEA,SAASc,OAAS9oB,KAAKylB,GAAGmD,mBAAmB5oB,KAAKgoB,SAAU,mBAC5DA,SAASjc,MAAQ/L,KAAKylB,GAAGmD,mBAAmB5oB,KAAKgoB,SAAU,eAC3DvC,GAAGsD,UAAU/oB,KAAKgoB,SAASc,OAAQ,MAAAzjB,IAAAA,cAAA/D,MAAAA,WAAA,IAKpC0nB,EAAAA,KAECC,YAAcjpB,KAAKylB,GAAGtE,eAAAA,KACtBsE,GAAGyD,WAAWlpB,KAAKylB,GAAG0D,qBAAsBnpB,KAAKipB,aAAAA,KACjDxD,GAAG2D,WAAWppB,KAAKylB,GAAG0D,qBAAsB,IAAIE,YAL1C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAK2CrpB,KAAKylB,GAAG6D,aAAAA,IAE1EpoB,OAAAA,EACAqoB,EAAM,GAHoED,IAIzEpoB,EAAI,EAAGA,EAAI,IAAKA,IAAAA,EAAS6I,KAAK7I,GAAAA,IACnC8nB,EAAM,IAAIK,YAAYE,GAAAA,KAEjBC,QAAUxpB,KAAKylB,GAAGtE,eAAAA,KAClBsE,GAAGyD,WAAWlpB,KAAKylB,GAAG0D,qBAAsBnpB,KAAKwpB,SAAAA,KACjD/D,GAAG2D,WAAWppB,KAAKylB,GAAG0D,qBAAsBH,EAAKhpB,KAAKylB,GAAG6D,aAAAA,EAExD,GACDpoB,EAAI,EAAGA,EAAI,IAAKA,IAAAA,EAAS6I,KAAK7I,EAAGA,EAAI,EAAGA,EAAI,GACjD8nB,EAAM,IAAIK,YAAYE,GAAAA,KAEjBE,YAAczpB,KAAKylB,GAAGtE,eAAAA,KACtBsE,GAAGyD,WAAWlpB,KAAKylB,GAAG0D,qBAAsBnpB,KAAKypB,aAAAA,KACjDhE,GAAG2D,WAAWppB,KAAKylB,GAAG0D,qBAAsBH,EAAKhpB,KAAKylB,GAAG6D,eAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAGrDI,GAAAA,KACJC,mBAAqB3iB,EAAgBpF,EAAKM,UAAUwnB,EAAQ,SAC3D3iB,EAASE,EAAQhD,aAAa,gBAA2C,EAA1BjE,KAAK2pB,mBAAkD,EAA1B3pB,KAAK2pB,oBACrD,OAA5B5jB,EAAUgB,EAAOG,WAAW,OAE1Bya,YAAAA,EACAC,IAAI5hB,KAAK2pB,mBAAoB3pB,KAAK2pB,mBAAoB3pB,KAAK2pB,mBAAoB,EAAa,EAAVvpB,KAAKV,IAAAA,GAAQ0B,EAC/F2gB,YAAAA,EACAT,UAAY,OAAAlgB,EACZ4gB,OAEDjb,EAAO6iB,cAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAGH3hB,GAAAA,IACL4hB,EAAK5hB,EAASqC,KAAKnG,MACnB2lB,EAAK7hB,EAASqC,KAAKlG,OAEnB2lB,EAAS/iB,EAAgBiB,EAASqC,KAAKnG,OACvC6lB,EAAUhjB,EAAgBiB,EAASqC,KAAKlG,QAExC6lB,EAAUhiB,EAASqC,KAAKnG,MAAQ4lB,EAChCG,EAAUjiB,EAASqC,KAAKlG,OAAS4lB,EAElChqB,KAAK8mB,eAAe7e,EAASgL,KAAKxM,OACnCzG,KAAK8mB,eAAe7e,EAASgL,KAAKxM,KAAO,CAACzG,KAAKylB,GAAG0E,gBAAiBnqB,KAAKylB,GAAGtE,eAAgBnhB,KAAKylB,GAAGtE,iBAAAA,EAE9FlO,KAAKmX,QAAUpqB,KAAK8mB,eAAe7e,EAASgL,KAAKxM,KAAK,GAAArF,EACtD6R,KAAKoX,SAAWrqB,KAAK8mB,eAAe7e,EAASgL,KAAKxM,KAAK,GAAArF,EACvD6R,KAAKqX,SAAWtqB,KAAK8mB,eAAe7e,EAASgL,KAAKxM,KAAK,QAE3Dgf,GAAGyD,WAAWlpB,KAAKylB,GAAG8E,aAActiB,EAASgL,KAAKqX,UAAAA,KAClD7E,GAAG2D,WAAWppB,KAAKylB,GAAG8E,aAAc,IAAI1V,aAAa,CAAC,EAAK,EAAKoV,EAAS,EAAK,EAAKC,EAASA,EAASA,IAAWlqB,KAAKylB,GAAG6D,aAAAA,KACxH7D,GAAGyD,WAAWlpB,KAAKylB,GAAG8E,aAActiB,EAASgL,KAAKoX,UAAAA,KAClD5E,GAAG2D,WAAWppB,KAAKylB,GAAG8E,aAAc,IAAI1V,aAAa,CAAC,EAAK,EAAKgV,EAAI,EAAK,EAAKC,EAAID,EAAIC,IAAM9pB,KAAKylB,GAAG6D,aAGnGrW,EADUhL,EAASgL,KAAKlM,OAAOG,WAAW,MAC3Bd,aAAa,EAAG,EAAG2jB,EAAQC,GAAAA,KAE3CvE,GAAG+E,YAAYxqB,KAAKylB,GAAGgF,WAAYxiB,EAASgL,KAAKmX,SAAAA,KACjD3E,GAAGiF,WAAW1qB,KAAKylB,GAAGgF,WAAY,EAAGzqB,KAAKylB,GAAGkF,KAAM3qB,KAAKylB,GAAGkF,KAAM3qB,KAAKylB,GAAGmF,cAAe3X,GAAAA,KACxFwS,GAAGoF,cAAc7qB,KAAKylB,GAAGgF,WAAYzqB,KAAKylB,GAAGqF,mBAAoB9qB,KAAKylB,GAAGsF,QAAAA,KACzEtF,GAAGoF,cAAc7qB,KAAKylB,GAAGgF,WAAYzqB,KAAKylB,GAAGuF,mBAAoBhrB,KAAKylB,GAAGwF,uBAAAA,KACzExF,GAAGyF,eAAelrB,KAAKylB,GAAGgF,YAAAA,EAEtBxX,KAAKkY,eAAAA,EAAgB/pB,EACrB6R,KAAKmY,aAAevB,EAAAA,EACpB5W,KAAKoY,cAAgBvB,IAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,cAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,SAQhB7hB,GAAAA,EACLgL,KAAKkY,eAAAA,EAAgB/pB,EACrB6R,KAAKqY,KAAO5W,EAAKzK,SAAAA,EACjBgJ,KAAKqY,KAAK,GAAK,EAAAlqB,EACf6R,KAAKsY,KAAO7W,EAAKzK,SAAAA,EACjBgJ,KAAKsY,KAAK,GAAK,EAEpBtjB,EAASqC,KAAAA,EACerC,EAASqC,KAAMtK,KAAK+gB,YAAa9Y,IAAAA,EAEjCjI,KAAK6mB,gBAAiB7mB,KAAK+gB,YAAa9Y,GAAAA,EACvDgL,KAAKuY,SAAWvjB,EAAS2K,OAAS5S,KAAK2pB,sBAAAA,CAAAA,IAAAA,cAAAA,MAAAA,SAK5CrjB,EAAK2B,GACTA,EAASwK,OAAAA,EACJnI,KAAOhE,EAAAA,EACP2M,KAAKxM,IAAMH,EAAIG,IAAAA,EACfwM,KAAKlM,OAAS2B,EAA2BpC,GAAAA,EACzC2M,KAAKuY,SAAW,OAEpBC,eAAexjB,MAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,SAGPA,GACTA,EAASgL,KAAKkY,gBAAAA,KACTO,aAAazjB,GAAAA,KAEbwd,GAAGkG,UAAU3rB,KAAKgoB,SAASjc,MAAO9D,EAAS8K,IAAI/G,EAAI,IAAK/D,EAAS8K,IAAInM,EAAI,IAAKqB,EAAS8K,IAAI5S,EAAI,UAC/FslB,GAAGmG,iBAAiB5rB,KAAKgoB,SAASW,aAAAA,EAAoB3oB,KAAK2mB,OAAOkF,OAAAA,KAElEpG,GAAGyD,WAAWlpB,KAAKylB,GAAG8E,aAActiB,EAASgL,KAAKoX,UAAAA,KAClD5E,GAAGqG,oBAAoB9rB,KAAKgoB,SAASO,IAAK,EAAGvoB,KAAKylB,GAAGsG,OAAAA,EAAc,EAAG,QACtEtG,GAAGyD,WAAWlpB,KAAKylB,GAAG8E,aAActiB,EAASgL,KAAKqX,UAAAA,KAClD7E,GAAGqG,oBAAoB9rB,KAAKgoB,SAASS,IAAK,EAAGzoB,KAAKylB,GAAGsG,OAAAA,EAAc,EAAG,QACtEtG,GAAG+E,YAAYxqB,KAAKylB,GAAGgF,WAAYxiB,EAASgL,KAAKmX,SAAAA,KACjD3E,GAAGsD,UAAU/oB,KAAKgoB,SAASa,eAAgB,QAC3CpD,GAAGyD,WAAWlpB,KAAKylB,GAAG0D,qBAAsBnpB,KAAKipB,aAAAA,KAEjDxD,GAAGuG,aAAahsB,KAAKylB,GAAGwG,UAAW,EAAGjsB,KAAKylB,GAAGyG,eAAgB,QAE9DvF,OAAO/c,SAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,cAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAMP3B,GAAAA,IACHkkB,EAAmBnlB,GAA2BiB,EAASgL,KAAKmY,aAAe,GAAInjB,EAASgL,KAAKoY,cAAgB,GAC7Ge,EAAoBplB,EAA0BiB,EAASrF,EAAEoC,EAAGiD,EAASrF,EAAEL,GAEvE8pB,EAAQpkB,EAAS4K,SAAYlT,EAASC,OACtC0sB,EAAiBtlB,EAAuBqlB,GAExCpnB,EAAQgD,EAAShD,MAAQgD,EAASgL,KAAKuY,SACvCe,EAAcvlB,EAAoB/B,EAAOA,GAC3CunB,EAASxlB,EAAyBmlB,EAAkBI,GAAAA,EAE/CvlB,EAAyBwlB,EAAQF,GAAAA,EACjCtlB,EAAyBwlB,EAAQJ,GAAAA,EAErCK,QAAQD,EAAQvkB,EAASgL,KAAKsY,MAAAA,EAC5B,GAAKtjB,EAASoK,MAAAA,KAEhBsU,OAAO5c,KAAKyiB,OAjQJhH,EAAAA,GAmBDxZ,EAAAA,GC3BwBwT,IAAvBgH,GAAAA,GAIL,ICFKkG,IAAAA,EAAAA,GAAiBrW,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,OAAAA,KAiC7B/V,OAASF,KAAKE,SAAAA,KAEdgW,OAAOtR,EACVhF,KAAK2sB,GAAK3sB,KAAKM,OAASN,KAAKmC,OAAS/B,KAAKqC,IAAIzC,KAAK+b,UAAAA,KACjDzF,OAAO/T,EACVvC,KAAK4sB,GAAK5sB,KAAKM,OAASN,KAAKmC,OAAS/B,KAAKuC,IAAI3C,KAAK+b,UAE/C/b,KAAKsW,SAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAGDtR,EAAGzC,GAAAA,IACRwkB,EAAI/mB,KAAKoS,GACT4U,GAAKhnB,KAAKmS,GAAAA,OAIc,GAAzB4U,EAAI/hB,EAAIgiB,EAAIzkB,EAHPvC,KAAK6sB,MACC,GAAN7F,EAAU,EAAIA,KAAAA,CAAAA,IAAAA,cAAAA,MAAAA,SAMdhiB,EAAGzC,GAAAA,OACHvC,KAAKoS,GAGDpN,GAFHhF,KAAKmS,GAEM5P,EADZvC,KAAK6sB,KAGJzsB,KAAK+Q,KAAKnR,KAAK8sB,QAAAA,CAAAA,IAAAA,eAAAA,MAAAA,SAGf1kB,GAAAA,IACL2kB,EAAO3kB,EAAE4T,cAET9J,EAAM,GADClS,KAAKgc,cACM+Q,GAElBC,EAAO5kB,EAAEpD,EACAzC,OAAT0qB,EAAO7kB,EAAE7F,EAAAA,EAEbyC,EAAIgoB,EAAO5sB,KAAKqC,IAAIyP,GAAO+a,EAAO7sB,KAAKuC,IAAIuP,GAAAA,EAC3C3P,EAAIyqB,EAAO5sB,KAAKuC,IAAIuP,GAAO+a,EAAO7sB,KAAKqC,IAAIyP,GAEtC9J,IAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,OAIAhI,KAAKwR,MAAM5R,KAAKoS,GAAIpS,KAAKmS,MAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAGzBlK,GAAAA,GACO7H,KAAKqU,IAAIzU,KAAKgc,gBAEfrc,EAASD,GAAK,MACrBuI,EAASrF,EAAEoC,GAAKhF,KAAKktB,MAAQjlB,EAASrF,EAAEoC,GAAKhF,KAAKmtB,KAAM,OAAO,UAE/DllB,EAASrF,EAAEL,GAAKvC,KAAKotB,MAAQnlB,EAASrF,EAAEL,GAAKvC,KAAKqtB,KAAM,OAAO,aAG9D,CAAAhoB,IAAAA,YAAA/D,MAAAA,WAAA,OAIAlB,KAAK+Q,KAAKnR,KAAKmS,GAAKnS,KAAKmS,GAAKnS,KAAKoS,GAAKpS,KAAKoS,MAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAG7CnK,GACgB,SAAnBjI,KAAKuW,UAEc,MAAnBvW,KAAKstB,WACc,MAAnBttB,KAAKstB,WACc,UAAnBttB,KAAKstB,WACc,SAAnBttB,KAAKstB,UAEAttB,KAAKutB,SAAStlB,IACfjI,KAAK+a,aAAa9S,EAASrF,EAAEoC,EAAGiD,EAASrF,EAAEL,KAAI0F,EAASwK,MAAAA,GAEvDzS,KAAKutB,SAAStlB,KACdjI,KAAK+a,aAAa9S,EAASrF,EAAEoC,EAAGiD,EAASrF,EAAEL,KAC9C0F,EAASwK,MAAAA,IAEe,UAAnBzS,KAAKuW,UACTvW,KAAKutB,SAAStlB,IAEfjI,KAAKwtB,YAAYvlB,EAASrF,EAAEoC,EAAGiD,EAASrF,EAAEL,IAAM0F,EAAS2K,SAC3C,IAAZ5S,KAAKmS,GAAAA,EACE/J,EAAEpD,IAAM,EACI,IAAZhF,KAAKoS,GAAAA,EACLhK,EAAE7F,IAAM,OAEZkrB,aAAaxlB,EAASG,IAGH,UAAnBpI,KAAKuW,WACVvW,KAAKwW,QAAAA,QACCE,MAAM,uDACTF,OAAAA,OAAQkX,IAAA,YA7HPf,EAAIC,EAAIe,EAAIC,EAAIN,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAGX,GAAXK,EAAKhB,GAAAA,EACFA,GAAKA,EAAAA,EACLC,GAAKA,EAAAA,EACLe,GAAKA,EAAAA,EACLC,GAAKA,IAAAA,EAELjB,GAAKgB,EAAAA,EACLf,GAAKgB,EAAAA,EACLD,GAAKhB,EAAAA,EACLiB,GAAKhB,GAAAA,EAGPza,GAAKtG,EAAK8hB,GAAK9hB,EAAK8gB,GAAAA,EACpBva,GAAKvG,EAAK+hB,GAAK/hB,EAAK+gB,GAAAA,EAEpBO,KAAO/sB,KAAKytB,IAAIhiB,EAAK8gB,GAAI9gB,EAAK8hB,IAAAA,EAC9BN,KAAOjtB,KAAKytB,IAAIhiB,EAAK+gB,GAAI/gB,EAAK+hB,IAAAA,EAC9BV,KAAO9sB,KAAKgT,IAAIvH,EAAK8gB,GAAI9gB,EAAK8hB,IAAAA,EAC9BP,KAAOhtB,KAAKgT,IAAIvH,EAAK+gB,GAAI/gB,EAAK+hB,IAAAA,EAE9Bf,IAAMhhB,EAAK8hB,GAAK9hB,EAAK+gB,GAAK/gB,EAAK8gB,GAAK9gB,EAAK+hB,GAAAA,EACzCd,KAAOjhB,EAAKsG,GAAKtG,EAAKsG,GAAKtG,EAAKuG,GAAKvG,EAAKuG,GAAAA,EAE1C2J,SAAWlQ,EAAKmQ,cAAAA,EAChB7Z,OAAS0J,EAAKiiB,YAAAA,EACdR,UAAY1rB,EAAKM,UAAUorB,EAAW,KAAArT,EAAA,IC9B1B8T,IAAAA,EAAAA,GAAmB1X,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,OAAAA,KAa/BmF,MAAQ7b,EAASquB,KAAO5tB,KAAKE,SAAAA,KAC7B2tB,aAAe7tB,KAAKE,SAAWN,KAAK4S,OAAAA,KAEpC0D,OAAOtR,EAAIhF,KAAKgF,EAAIhF,KAAKiuB,aAAe7tB,KAAKqC,IAAIzC,KAAKwb,OAAAA,KACtDlF,OAAO/T,EAAIvC,KAAKuC,EAAIvC,KAAKiuB,aAAe7tB,KAAKuC,IAAI3C,KAAKwb,OAEpDxb,KAAKsW,SAAAA,CAAAA,IAAAA,YAAAA,MAAAA,SAGJtR,EAAGzC,GAAAA,KACNhC,OAAOyE,EAAIA,EAAAA,KACXzE,OAAOgC,EAAIA,IAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAGT0F,GAAAA,IACD7F,EAAI6F,EAASrF,EAAEsrB,WAAWluB,KAAKO,QAEd,SAAnBP,KAAKuW,UACHnU,EAAI6F,EAAS2K,OAAS5S,KAAK4S,SAAQ3K,EAASwK,MAAAA,GACpB,UAAnBzS,KAAKuW,UACVnU,EAAI6F,EAAS2K,QAAU5S,KAAK4S,QAAQ5S,KAAKytB,aAAaxlB,GAC9B,UAAnBjI,KAAKuW,WACVvW,KAAKwW,QAAAA,QACCE,MAAM,yDACTF,OAAAA,KAAQ,CAAAnR,IAAAA,eAAA/D,MAAAA,SAKN2G,GAAAA,IACP8kB,EAAO9kB,EAASG,EAAE4T,cAGlB9J,EAAM,GAFClS,KAAKgc,YAAY/T,GAEN8kB,GAClBC,EAAO/kB,EAASG,EAAEpD,EAClBioB,EAAOhlB,EAASG,EAAE7F,EAAAA,EAEb6F,EAAEpD,EAAIgoB,EAAO5sB,KAAKqC,IAAIyP,GAAO+a,EAAO7sB,KAAKuC,IAAIuP,GAAAA,EAC7C9J,EAAE7F,EAAIyqB,EAAO5sB,KAAKuC,IAAIuP,GAAO+a,EAAO7sB,KAAKqC,IAAIyP,KAAAA,CAAAA,IAAAA,cAAAA,MAAAA,SAG5CjK,GAAAA,OAEPtI,EAASqR,KACV5Q,KAAKwR,MAAM3J,EAASrF,EAAEL,EAAIvC,KAAKO,OAAOgC,EAAG0F,EAASrF,EAAEoC,EAAIhF,KAAKO,OAAOyE,OAAAA,IAAAA,SAAAA,GAxD5DA,EAAGzC,EAAGqQ,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAGX5N,EAAIA,EAAAA,EACJzC,EAAIA,EAAAA,EACJqQ,OAASA,EAAAA,EAET4I,MAAQ,EAAAtb,EACRK,OAAS,CAAEyE,EAAAA,EAAGzC,EAAAA,GAAAA,EAAAA,ICVF4rB,IAAAA,EAAAA,GAAiB9X,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,OAAAA,KAW7BC,OAAOtR,EAAIhF,KAAKgF,EAAI5E,KAAKE,SAAWN,KAAKmE,MAAAA,KACzCmS,OAAO/T,EAAIvC,KAAKuC,EAAInC,KAAKE,SAAWN,KAAKoE,OAEvCpE,KAAKsW,SAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAGLrO,GAEgB,SAAnBjI,KAAKuW,YACHtO,EAASrF,EAAEoC,EAAIiD,EAAS2K,OAAS5S,KAAKgF,GACjCiD,EAASrF,EAAEoC,EAAIiD,EAAS2K,OAAS5S,KAAKgF,EAAIhF,KAAKmE,SADX8D,EAASwK,MAAAA,IAIlDxK,EAASrF,EAAEL,EAAI0F,EAAS2K,OAAS5S,KAAKuC,GACjC0F,EAASrF,EAAEL,EAAI0F,EAAS2K,OAAS5S,KAAKuC,EAAIvC,KAAKoE,UADX6D,EAASwK,MAAAA,IAM5B,UAAnBzS,KAAKuW,WACRtO,EAASrF,EAAEoC,EAAIiD,EAAS2K,OAAS5S,KAAKgF,GAAAA,EAC/BpC,EAAEoC,EAAIhF,KAAKgF,EAAIiD,EAAS2K,OAAAA,EACxBxK,EAAEpD,IAAM,GACRiD,EAASrF,EAAEoC,EAAIiD,EAAS2K,OAAS5S,KAAKgF,EAAIhF,KAAKmE,QAAAA,EAC/CvB,EAAEoC,EAAIhF,KAAKgF,EAAIhF,KAAKmE,MAAQ8D,EAAS2K,OAAAA,EACrCxK,EAAEpD,IAAM,GAGfiD,EAASrF,EAAEL,EAAI0F,EAAS2K,OAAS5S,KAAKuC,GAAAA,EAC/BK,EAAEL,EAAIvC,KAAKuC,EAAI0F,EAAS2K,OAAAA,EACxBxK,EAAE7F,IAAM,GACR0F,EAASrF,EAAEL,EAAI0F,EAAS2K,OAAS5S,KAAKuC,EAAIvC,KAAKoE,SAAAA,EAC/CxB,EAAEL,EAAIvC,KAAKuC,EAAIvC,KAAKoE,OAAS6D,EAAS2K,OAAAA,EACtCxK,EAAE7F,IAAM,IAKO,UAAnBvC,KAAKuW,YACRtO,EAASrF,EAAEoC,EAAIiD,EAAS2K,OAAS5S,KAAKgF,GAAKiD,EAASG,EAAEpD,GAAK,EAC7DiD,EAASrF,EAAEoC,EAAIhF,KAAKgF,EAAIhF,KAAKmE,MAAQ8D,EAAS2K,OAE9C3K,EAASrF,EAAEoC,EAAIiD,EAAS2K,OAAS5S,KAAKgF,EAAIhF,KAAKmE,OAC/B,GAAhB8D,EAASG,EAAEpD,IAEXiD,EAASrF,EAAEoC,EAAIhF,KAAKgF,EAAIiD,EAAS2K,QAE/B3K,EAASrF,EAAEL,EAAI0F,EAAS2K,OAAS5S,KAAKuC,GAAK0F,EAASG,EAAE7F,GAAK,EAC7D0F,EAASrF,EAAEL,EAAIvC,KAAKuC,EAAIvC,KAAKoE,OAAS6D,EAAS2K,OAE/C3K,EAASrF,EAAEL,EAAI0F,EAAS2K,OAAS5S,KAAKuC,EAAIvC,KAAKoE,QAC/B,GAAhB6D,EAASG,EAAE7F,IAEX0F,EAASrF,EAAEL,EAAIvC,KAAKuC,EAAI0F,EAAS2K,aAAAA,IAAAA,SAAAA,GA/D3B5N,EAAGzC,EAAG4B,EAAOC,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAGlBY,EAAIA,EAAAA,EACJzC,EAAIA,EAAAA,EACJ4B,MAAQA,EAAAA,EACRC,OAASA,EAAAA,ECNGgqB,SAAAA,GACPnK,EAAWjf,EAAGzC,EAAGH,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,EAAAA,MAAAA,GAAAA,WAAAA,OAAAA,eAAAA,KAAAA,KAAAA,OAAAA,OAAAA,EAGtB4Q,MAAMiR,EAAWjf,EAAGzC,EAAGH,GAAAA,ECwDlB2f,OFtDI3d,EAAAA,GCNqBiS,IAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAO/B4N,EAAWjf,EAAGzC,EAAGH,GAAAA,KAChB6hB,UAAYA,EAAAA,KACZjf,EAAIpD,EAAKM,UAAU8C,EAAG,QACtBzC,EAAIX,EAAKM,UAAUK,EAAG,QACtBH,EAAIR,EAAKM,UAAUE,EAAG,QAEtBisB,QAAU,QACVC,eAAAA,CAAAA,IAAAA,aAAAA,MAAAA,WAAAA,IAIDptB,OAAAA,EAAGqtB,OAAAA,EACDC,EAAUxuB,KAAKikB,UAAU9f,MACzBsqB,EAAUzuB,KAAKikB,UAAU7f,OAN1BkqB,IAQAptB,EAAI,EAAGA,EAAIstB,EAASttB,GAAKlB,KAAKoC,EAAAA,IAC5BmsB,EAAI,EAAGA,EAAIE,EAASF,GAAKvuB,KAAKoC,EAAG,KAChC4L,EAA0C,IAAhCugB,GAAK,GAAKC,GAAWttB,GAAK,IAEH,EAAjClB,KAAKikB,UAAUhR,KAAa,EAARjF,IAAAA,KACjBqgB,QAAQtkB,KAAK,CAAE/E,EAAG9D,EAAIlB,KAAKgF,EAAGzC,EAAGgsB,EAAIvuB,KAAKuC,IAAAA,OAK9CvC,KAAKsW,SAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAGLtR,EAAGzC,GAC2C,OAAjDyL,EAAuD,IAA7CzL,GAAK,GAAKvC,KAAKikB,UAAU9f,OAASa,GAAK,IAChB,EAAjChF,KAAKikB,UAAUhR,KAAa,EAARjF,KAAAA,CAAAA,IAAAA,cAAAA,MAAAA,WAAAA,IAKlBsI,EAAS1U,EAAKC,iBAAiB7B,KAAKquB,SAAAA,OACnCruB,KAAKsW,OAAOjO,KAAKiO,KAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAGjBtR,EAAGzC,GAGuC,OAHvCA,GACLvC,KAAKgF,EAEN9D,EAAmD,QADlDlB,KAAKuC,IACK,GAAKvC,KAAKikB,UAAU9f,OAASa,GAAK,IAE1C,CAAAgH,EACFhM,KAAKikB,UAAUhR,KAAK/R,GAAAA,EACpBlB,KAAKikB,UAAUhR,KAAS,EAAJ/R,GAAAA,EACpBlB,KAAKikB,UAAUhR,KAAS,EAAJ/R,GAAAA,EACpBlB,KAAKikB,UAAUhR,KAAS,EAAJ/R,MAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAIlB+G,GACgB,SAAnBjI,KAAKuW,UACHvW,KAAK0uB,SAASzmB,EAASrF,EAAEoC,EAAIhF,KAAKgF,EAAGiD,EAASrF,EAAEL,EAAIvC,KAAKuC,GAC3D0F,EAASwK,MAAAA,EACNxK,EAASwK,MAAAA,EACc,UAAnBzS,KAAKuW,YACTvW,KAAK0uB,SAASzmB,EAASrF,EAAEoC,EAAIhF,KAAKgF,EAAGiD,EAASrF,EAAEL,EAAIvC,KAAKuC,IAC5D0F,EAASG,EAAEumB,cAlEEP,EAAAA,GAIWhsB,ECDjB,CAAAwJ,iBAAAA,SACIf,EAAQ+jB,GAAAA,EAChBhjB,iBAAiB,uBAAuB,kBAAMgjB,QAAAA,SAAAA,SAAAA,GAGtC,eACT7b,EAAMqI,EAAUtH,SAAAA,EAAAA,UAAAA,aAAAA,IAAAA,EAAAA,EADP,YAEI9H,EAAAA,KAAM+G,EAAInM,EAAAA,KAAMmM,EAAI5S,EAAAA,UAAAA,SAAAA,SAGhC0K,EAAQ9D,EAAQ8P,EAAMjJ,GAAAA,IACvB7H,EAAUgB,EAAOG,WAAW,MAC5BzC,EAAQzE,KAAK6uB,WAAAA,KAEdjjB,iBAAiBf,GAAQ,WACxB+C,GAAO7H,EAAQM,UAAU,EAAG,EAAGU,EAAO5C,MAAO4C,EAAO3C,QAEpDyS,aAAgBJ,IAAAA,EACVkL,YAAAA,EACAL,UAAY7c,EAAAA,EACZmd,IAAI/K,EAAK7R,EAAG6R,EAAKtU,EAAG,GAAI,EAAa,EAAVnC,KAAKV,IAAAA,GAAQsM,EACxCgW,OAAAA,EACAD,aACClL,aAAgB6V,IAAAA,EACjB/K,YAAAA,EACAE,YAAcpd,EAAAA,EACdqqB,OAAOjY,EAAK8V,GAAI9V,EAAK+V,IAAAA,EACrBmC,OAAOlY,EAAK8W,GAAI9W,EAAK+W,IAAAA,EACrBlO,SAAAA,EACAqC,aACClL,aAAgBsX,IAAAA,EACjBxM,YAAAA,EACAE,YAAcpd,EAAAA,EACduqB,SAASnY,EAAK7R,EAAG6R,EAAKtU,EAAGsU,EAAK1S,MAAO0S,EAAKzS,QAAAA,EAC1Csb,SAAAA,EACAqC,aACClL,aAAgBkX,KAAAA,EACjBpM,YAAAA,EACAE,YAAcpd,EAAAA,EACdmd,IAAI/K,EAAK7R,EAAG6R,EAAKtU,EAAGsU,EAAKjE,OAAQ,EAAa,EAAVxS,KAAKV,IAAAA,GAAQsM,EACjD0T,SAAAA,EACAqC,iBAAAA,YAAAA,SAKFlX,EAAQ9D,EAAQyD,EAASoD,GAAAA,IAC7B7H,EAAUgB,EAAOG,WAAW,MAC5BzC,EAAQzE,KAAK6uB,WAAAA,KAEdjjB,iBAAiBf,GAAQ,WACxB+C,GAAO7H,EAAQM,UAAU,EAAG,EAAGU,EAAO5C,MAAO4C,EAAO3C,QAAAA,EAEhDud,YAAAA,EACAL,UAAY7c,EAAAA,EACZmd,IAAIpX,EAAQ5H,EAAEoC,EAAGwF,EAAQ5H,EAAEL,EAAG,GAAI,EAAa,EAAVnC,KAAKV,IAAAA,GAAQsM,EAClDgW,OAAAA,EACAD,iBCFdlU,EAAOyE,SAAWA,EAClBzE,EAAOtE,KAAOA,EAEdsE,EAAOjM,KAAOA,EACdiM,EAAOuN,UAAYA,EACnBvN,EAAOlO,SAAWA,EAClBkO,EAAO8D,SAAW9D,EAAOohB,OAAStd,EAClC9D,EAAOyG,QAAUzG,EAAOqhB,MAAQ5a,EAChCzG,EAAOqH,UAAYA,EACnBrH,EAAOyH,UAAYA,EACnBzH,EAAO4H,KAAOA,EACd5H,EAAO6D,KAAOA,EACd7D,EAAOnM,KAAOA,EACdmM,EAAO6G,KAAOA,EACd7G,EAAOshB,QAAU,SAACjvB,EAAGC,EAAGI,GAAAA,OAAW,IAAImB,EAAKxB,EAAGC,EAAGI,IAClDsN,EAAOqN,gBAAkBhG,EAAUgG,gBAEnCrN,EAAOqI,WAAarI,EAAOuhB,KAAOlZ,EAClCrI,EAAOsI,KAAOtI,EAAOwC,EAAI8F,GACzBtI,EAAO+I,SAAW/I,EAAO6F,EAAIkD,GAC7B/I,EAAOkJ,SAAWlJ,EAAOwhB,EAAItY,GAC7BlJ,EAAO0J,KAAO1J,EAAOyhB,EAAI/X,GACzB1J,EAAO4J,OAAS5J,EAAO0hB,EAAI9X,GAC3B5J,EAAO8J,KAAO9J,EAAOmZ,EAAIrP,GAEzB9J,EAAOiK,UAAYA,GACnBjK,EAAOqK,MAAQrK,EAAO2hB,EAAItX,GAC1BrK,EAAO0K,WAAa1K,EAAOkZ,EAAIxO,GAC/B1K,EAAOkL,YAAclL,EAAO4hB,GAAK1W,GACjClL,EAAOyL,QAAUzL,EAAO6hB,EAAIpW,GAC5BzL,EAAO0L,UAAYA,GACnB1L,EAAOqM,UAAYA,GACnBrM,EAAOuM,MAAQA,GACfvM,EAAO4M,MAAQ5M,EAAO8hB,EAAIlV,GAC1B5M,EAAO+M,OAASA,GAChB/M,EAAOoN,MAAQA,GACfpN,EAAOoO,UAAYA,GACnBpO,EAAO0N,QAAUA,GACjB1N,EAAOsO,YAAcA,GAErBtO,EAAO8O,QAAUA,GACjB9O,EAAOuQ,iBAAmBA,GAC1BvQ,EAAOyQ,cAAgBA,GAEvBzQ,EAAOwI,KAAOA,GACdxI,EAAO6e,SAAWA,GAClB7e,EAAOkgB,WAAaA,GACpBlgB,EAAO4I,UAAYA,GACnB5I,EAAOsgB,SAAWA,GAClBtgB,EAAOugB,UAAYA,EAEnBvgB,EAAOiT,eAAiBA,GACxBjT,EAAOsU,YAAcA,GACrBtU,EAAOqV,cAAgBA,GACvBrV,EAAO0W,aAAeA,GACtB1W,EAAOkW,cAAgBA,GACvBlW,EAAO2X,cAAgB3X,EAAO+hB,cAAgBpK,EAC9C3X,EAAO2Y,eAAiBA,GAExB3Y,EAAOgiB,MAAQA,EACfjuB,EAAKgH,OAAOiF,EAAQ6D,GAAAA,gECrGnB,mBAEIoe,EAAAA,CAAW,KAAM,MAAO,SAAU,KAC7B9qB,EAAI,EAAGA,EAAI8qB,EAAQ3tB,SAAWmd,OAAOyQ,wBAAyB/qB,EAAAA,OAC/D+qB,sBAAwBzQ,OAAOwQ,EAAQ9qB,GAAK,yBAAAsa,OAC5C0Q,qBAAuB1Q,OAAOwQ,EAAQ9qB,GAAK,yBAC9Csa,OAAOwQ,EAAQ9qB,GAAK,+BANzB,IAAAirB,MAWO,EAAAC,MACA,OAAAC,WAAAA,GAAA5lB,IAAAA,SAGHhE,GAAAA,IAAUgJ,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAM,GAEb6gB,EAAAA,CAAY7pB,SAAAA,EAAUgJ,IAAAA,EAAK0K,EADvB,GAAK1K,EACqB/I,MAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAFL,KAEYtF,EAAG,eACzCivB,WAAWpmB,KAAKqmB,GACjBpwB,KAAKmwB,WAAWhuB,QAAU,GAAGnC,KAAKqwB,QAE/BrwB,MAAAA,SAAAA,SAGCuG,GAAAA,IACH,IAAIrF,EAAI,EAAGA,EAAIlB,KAAKmwB,WAAWhuB,OAAQjB,IAAK,GAChClB,KAAKmwB,WAAWjvB,GACpBqF,WAAaA,EAAU,OAAOrF,EAAAA,OAGnC,GAAA+M,OAAAA,SAGF1H,GAAAA,KACQvG,KAAKswB,SAAS/pB,GAChB,eAEPgqB,UAAUhqB,GACgB,IAA3BvG,KAAKmwB,WAAWhuB,QAAcnC,KAAKie,OAEhCje,MAAAA,UAAAA,SAGEuG,GAAAA,IACHyH,EAAQhO,KAAKswB,SAAS/pB,GACtB6pB,EAAUpwB,KAAKmwB,WAAWniB,GAAAA,IAC3B,IAAI3I,KAAO+qB,SAAgBA,EAAQ/qB,GAExCrF,KAAKmwB,WAAWtjB,OAAOmB,EAAO,IAAAqiB,MAAAA,WAAA,GAIX,UAAfrwB,KAAKkwB,MAAAA,OAAAA,KAEJA,MAAQ,aACRM,OACExwB,MAAAA,KAAAA,WAAAA,GAIY,SAAfA,KAAKkwB,MAAAA,OAAAA,KAEJA,MAAQ,OAAAF,qBACQhwB,KAAKiwB,OACnBjwB,MAAAA,KAAAA,WAAAA,IAAAA,EAAAA,KAAAA,KAIFiwB,MAAQF,uBAAsB,WAAA3uB,EAAaovB,UAAAA,IAE3C,IAAItvB,EAAI,EAAGA,EAAIlB,KAAKmwB,WAAWhuB,OAAQjB,IAAK,KAC1CkvB,EAAUpwB,KAAKmwB,WAAWjvB,GAC1BqF,EAAW6pB,EAAQ7pB,SACnBC,EAAQ4pB,EAAQ5pB,MAAAA,EAEdtF,IACJkvB,EAAQlvB,GAAKkvB,EAAQnW,IAAAA,EACfzT,GAAAA,EACDtF,EAAI,qVC9FVuvB,EAAAA,SAAAA,cACQnoB,0UACJA,aAEDoJ,KAAO,KACPgf,MAAQ,IACRC,MAAQ,IACR5R,gBAAiB,IACjB6R,aAAe/kB,EAAK+kB,aAAa9oB,KAAlB,KACf+oB,iBAAmBhlB,EAAKglB,iBAAiB/oB,KAAtB,KACnBgpB,iBAAmBjlB,EAAKilB,iBAAiBhpB,KAAtB,KACnBipB,eAAiBllB,EAAKklB,eAAejpB,KAApB,KAEjBkpB,mZAIA1sB,IAAMC,SAASC,cAAc,YAC7BF,IAAIG,MAAMJ,SAAW,aACrBC,IAAIG,MAAMwsB,KAAO,WACjB3sB,IAAIG,MAAMonB,IAAM,WAChBvnB,IAAIG,MAAMysB,OAAS,UACnB5sB,IAAIG,MAAM0sB,cAAgB,YAC1B7sB,IAAIJ,GAAT,aAA2C,OAAhB9D,KAAKE,UAAsB,YAC7CgK,KAAK4B,YAAYlM,KAAKsE,iEAKpBgG,KAAKsC,oBAAoB,YAAa5M,KAAK6wB,kBAAkB,YAC7DvmB,KAAKsC,oBAAoB,YAAa5M,KAAK8wB,kBAAkB,YAC7DxmB,KAAKsC,oBAAoB,UAAW5M,KAAK+wB,gBAAgB,cAChD/wB,KAAK4wB,mBAClB/lB,OAAOlC,UACZ,MAAO9B,sDAIJuqB,sBACAC,6BACAC,4DAIAC,uBACUvxB,KAAK4wB,uEAIXtmB,KAAKsB,iBAAiB,YAAa5L,KAAK6wB,kBAAkB,YAC1DvmB,KAAKsB,iBAAiB,YAAa5L,KAAK8wB,kBAAkB,YAC1DxmB,KAAKsB,iBAAiB,UAAW5L,KAAK+wB,gBAAgB,4CAGhDlqB,2CACFA,6CAEEA,OACX7G,KAAKwxB,UAAU3qB,QACf7B,EACFzC,IAEEsE,EAAE4qB,UACF5qB,EAAE6qB,aAEDlnB,QAAQ5H,EAAEoC,IAAMA,EAAIhF,KAAKwK,QAAQ5H,EAAEoC,GAAKhF,KAAK0R,UAC7ClH,QAAQ5H,EAAEL,IAAMA,EAAIvC,KAAKwK,QAAQ5H,EAAEL,GAAKvC,KAAK0R,KAE9C1R,KAAK+e,gBAAgB/e,KAAKwK,QAAQmnB,KAAK,oDAItCC,cAAgB5xB,KAAKsI,MAAMupB,MAAQ,QACnCD,cAAgB5xB,KAAK4xB,cAAcE,MAAM,UAEzCnB,MAAQ3wB,KAAKsI,MAAMooB,OAAS,oCAGzB7pB,eACH6pB,MAAQ,GAyEIhQ,EAvED7Z,EAAEC,kBAwEMirB,kBAAqC,SAAjBrR,EAAQxX,SAGxD,SAAmBwX,OACbsR,EAAUtR,EAAQsR,QAAQrW,oBACd,aAAZqW,GACY,UAAZA,EA7EEC,CAAUprB,EAAEC,YACX9G,KAAK4xB,gBAAkB5xB,KAAK4xB,cAAczvB,SAExCnC,KAAKkyB,UAAUrrB,EAAEC,OAAQ9G,KAAK4xB,gBAmEzC,IAAqBlR,oCAhETA,EAASkR,MACb5xB,KAAK0wB,OAAS1wB,KAAK2wB,MAAO,OAAO,MAChCjQ,EAAS,OAAO,MAChBA,EAAQyR,UAAW,OAAO,KAC3BzR,IAAYnc,SAAS+F,KAAM,OAAO,MAEjC,IAAIpJ,EAAI,EAAGA,EAAI0wB,EAAczvB,OAAQjB,OACpCwf,EAAQyR,UAAUC,SAASR,EAAc1wB,WACpC,cAGNwvB,QAEE1wB,KAAKkyB,UAAUxR,EAAQzU,WAAY2lB,wCAG/B7qB,QACN8D,OAAS,IAAIgD,SAEZrD,EAAU,IAAIqD,IAAAA,WACZmP,KAAO,IAAInP,IAAAA,MAAY7N,KAAKsI,MAAMvI,KAAO,KACzCuN,QAAU,SAEZiF,EAAOvS,KAAKsI,MAAMiK,KAAO,IAAI1E,IAAAA,MAAY7N,KAAKsI,MAAMiK,MAAQ,IAAI1E,IAAAA,MAAY,GAAK,IACjF9B,EAAQ/L,KAAKsI,MAAMyD,OAAS,SAC5BnF,EAAI5G,KAAKsI,MAAM1B,EACfwB,EAAIpI,KAAKsI,MAAMF,GAAK,IACpBiK,EAAQrS,KAAKsI,MAAM+J,OAASxE,IAAAA,QAAe,IAAM,KACjDqE,EAAMlS,KAAKsI,MAAM4J,IAAM,IAAIrE,IAAAA,MAAY7N,KAAKsI,MAAM4J,IAAI,GAAIlS,KAAKsI,MAAM4J,IAAI,IAAM,IAAIrE,IAAAA,MAAY,EAAG,KACpG+E,EAAS,IAAI/E,IAAAA,QAAc,EAAG,MAC9B7N,KAAKsI,MAAMsK,OAAQ,KACf5G,EAAIhM,KAAKsI,MAAMsK,SACZ,IAAI/E,IAAAA,QAAkB,GAAJ7B,EAASA,KAG9BqmB,cAAc,IAAIxkB,IAAAA,MAAY,MAC9BwkB,cAAczf,KACdyf,cAAc9f,KACd8f,cAAc,IAAIxkB,IAAAA,UAAgB,IAAIA,IAAAA,MAAYzF,GAAI8J,EAAK,YAE3DuB,aAAa,IAAI5F,IAAAA,OAAawE,MAC9BoB,aAAa,IAAI5F,IAAAA,OAAa9B,MAC9B0H,aAAa,IAAI5F,IAAAA,OAAa,EAAG,OACjC4F,aAAa,IAAI5F,IAAAA,aAAmB,GAAI,GAAI,KAChDjH,KACM6M,aAAa,IAAI5F,IAAAA,GAASykB,WAAW1rB,UAG1CiE,OAAO0nB,WAAW/nB,OACjBE,EAAW,IAAImD,IAAAA,aAAmB7N,KAAKsE,UACxCuG,OAAO2nB,YAAY9nB,QACnBF,QAAUA,8CAIVK,QAAU7K,KAAK6K,OAAOqE,iDAIpBujB,EAAAA,cAACA,EAAAA,SAAD,YAnJLhC,CAAuBgC,EAAAA","sources":["../node_modules/proton-engine/src/math/MathUtil.js","../node_modules/proton-engine/src/math/Span.js","../node_modules/proton-engine/src/utils/WebGLUtil.js","../node_modules/proton-engine/src/utils/DomUtil.js","../node_modules/proton-engine/src/utils/ImgUtil.js","../node_modules/proton-engine/src/utils/Util.js","../node_modules/proton-engine/src/utils/Puid.js","../node_modules/proton-engine/src/core/Pool.js","../node_modules/proton-engine/src/debug/Stats.js","../node_modules/proton-engine/src/events/EventDispatcher.js","../node_modules/proton-engine/src/math/Integration.js","../node_modules/proton-engine/src/core/Proton.js","../node_modules/proton-engine/src/utils/Rgb.js","../node_modules/proton-engine/src/math/ease.js","../node_modules/proton-engine/src/math/Vector2D.js","../node_modules/proton-engine/src/core/Particle.js","../node_modules/proton-engine/src/utils/ColorUtil.js","../node_modules/proton-engine/src/math/Polar2D.js","../node_modules/proton-engine/src/math/Mat3.js","../node_modules/proton-engine/src/math/ArraySpan.js","../node_modules/proton-engine/src/math/Rectangle.js","../node_modules/proton-engine/src/initialize/Rate.js","../node_modules/proton-engine/src/initialize/Initialize.js","../node_modules/proton-engine/src/initialize/Life.js","../node_modules/proton-engine/src/zone/Zone.js","../node_modules/proton-engine/src/zone/PointZone.js","../node_modules/proton-engine/src/initialize/Position.js","../node_modules/proton-engine/src/initialize/Velocity.js","../node_modules/proton-engine/src/initialize/Mass.js","../node_modules/proton-engine/src/initialize/Radius.js","../node_modules/proton-engine/src/initialize/Body.js","../node_modules/proton-engine/src/behaviour/Behaviour.js","../node_modules/proton-engine/src/behaviour/Force.js","../node_modules/proton-engine/src/behaviour/Attraction.js","../node_modules/proton-engine/src/behaviour/RandomDrift.js","../node_modules/proton-engine/src/behaviour/Gravity.js","../node_modules/proton-engine/src/behaviour/Collision.js","../node_modules/proton-engine/src/behaviour/CrossZone.js","../node_modules/proton-engine/src/behaviour/Alpha.js","../node_modules/proton-engine/src/behaviour/Scale.js","../node_modules/proton-engine/src/behaviour/Rotate.js","../node_modules/proton-engine/src/behaviour/Color.js","../node_modules/proton-engine/src/behaviour/Cyclone.js","../node_modules/proton-engine/src/behaviour/Repulsion.js","../node_modules/proton-engine/src/behaviour/GravityWell.js","../node_modules/proton-engine/src/initialize/InitializeUtil.js","../node_modules/proton-engine/src/emitter/Emitter.js","../node_modules/proton-engine/src/emitter/BehaviourEmitter.js","../node_modules/proton-engine/src/emitter/FollowEmitter.js","../node_modules/proton-engine/src/render/BaseRenderer.js","../node_modules/proton-engine/src/render/CanvasRenderer.js","../node_modules/proton-engine/src/render/DomRenderer.js","../node_modules/proton-engine/src/render/EaselRenderer.js","../node_modules/proton-engine/src/render/PixelRenderer.js","../node_modules/proton-engine/src/render/PixiRenderer.js","../node_modules/proton-engine/src/utils/MStack.js","../node_modules/proton-engine/src/render/WebGLRenderer.js","../node_modules/proton-engine/src/render/CustomRenderer.js","../node_modules/proton-engine/src/zone/LineZone.js","../node_modules/proton-engine/src/zone/CircleZone.js","../node_modules/proton-engine/src/zone/RectZone.js","../node_modules/proton-engine/src/zone/ImageZone.js","../node_modules/proton-engine/src/debug/Debug.js","../node_modules/proton-engine/src/index.js","../node_modules/raf-manager/src/RAFManager.js","../node_modules/react-mouse-particles/src/index.js"],"sourcesContent":["const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n  PI: PI,\n  PIx2: PI * 2,\n  PI_2: PI / 2,\n  PI_180: PI / 180,\n  N180_PI: 180 / PI,\n  Infinity: -999,\n\n  isInfinity(num) {\n    return num === this.Infinity || num === INFINITY;\n  },\n\n  randomAToB(a, b, isInt = false) {\n    if (!isInt) return a + Math.random() * (b - a);\n    else return Math.floor(Math.random() * (b - a)) + a;\n  },\n\n  randomFloating(center, f, isInt) {\n    return this.randomAToB(center - f, center + f, isInt);\n  },\n\n  randomColor() {\n    return (\n      \"#\" +\n      (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n    );\n  },\n\n  randomZone(display) {},\n\n  floor(num, k = 4) {\n    const digits = Math.pow(10, k);\n    return Math.floor(num * digits) / digits;\n  },\n\n  degreeTransform(a) {\n    return (a * PI) / 180;\n  },\n\n  toColor16(num) {\n    return `#${num.toString(16)}`;\n  }\n};\n\nexport default MathUtil;\n","import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n","export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n","export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n","import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n","import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  },\n\n  assign(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      for (let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n\n      return target;\n    } else {\n      return Object.assign(target, source);\n    }\n  }\n};\n","const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n","/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n","export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n","export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n","import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport MathUtil from \"../math/MathUtil\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // measure 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  // event name\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static DEFAULT_INTERVAL = 0.0167;\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.now = 0;\n    this.then = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n\n    this._fps = \"auto\";\n    this._interval = Proton.DEFAULT_INTERVAL;\n  }\n\n  set fps(fps) {\n    this._fps = fps;\n    this._interval =\n      fps === \"auto\" ? Proton.DEFAULT_INTERVAL : MathUtil.floor(1 / fps, 7);\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    // 'auto' is the default browser refresh rate, the vast majority is 60fps\n    if (this._fps === \"auto\") {\n      this.dispatchEvent(Proton.PROTON_UPDATE);\n\n      if (Proton.USE_CLOCK) {\n        if (!this.then) this.then = new Date().getTime();\n        this.now = new Date().getTime();\n        this.elapsed = (this.now - this.then) * 0.001;\n        // Fix bugs such as chrome browser switching tabs causing excessive time difference\n        this.amendChangeTabsBug();\n\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n        this.then = this.now;\n      } else {\n        this.emittersUpdate(Proton.DEFAULT_INTERVAL);\n      }\n\n      this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    // If the fps frame rate is set\n    else {\n      if (!this.then) this.then = new Date().getTime();\n      this.now = new Date().getTime();\n      this.elapsed = (this.now - this.then) * 0.001;\n\n      if (this.elapsed > this._interval) {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n        this.emittersUpdate(this._interval);\n        // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n        this.then = this.now - (this.elapsed % this._interval) * 1000;\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n      }\n    }\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (!Proton.amendChangeTabsBug) return;\n    if (this.elapsed > 0.5) {\n      this.then = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.then = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n","export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n","import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n","import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n","/** @typedef {import('../behaviour/Behaviour')} Behaviour */\n/** @typedef {import('../math/Vector2D')} Vector2D */\n/** @typedef {import('../utils/Rgb')} Rgb */\nimport Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /** @type string */\n  id = ''\n\n  /** @type {{p:Vector2D,v:Vector2D,a:Vector2D}} */\n  old = {}\n\n  /** @type {object} */\n  data = {}\n\n  /** @type {Behaviour[]} */\n  behaviours = []\n\n  /** @type {Vector2D} */\n  p = []\n\n  /** @type {Vector2D} */\n  v = []\n\n  /** @type {Vector2D} */\n  a = []\n\n  /** @type {Rgb} */\n  rgb = {}\n\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  /**\n   * @param {Behaviour} behaviour\n   */\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  /**\n   * @param {Behaviour[]} behaviours\n   */\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n","export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n","import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n","const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n","import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n","export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n","export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n","import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n","import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n","import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from \"../utils/Util\";\nimport Vector2D from \"../math/Vector2D\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Attraction extends Behaviour {\n  /**\n   * This behaviour let the particles follow one specific Proton.Vector2D\n   *\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Attraction\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {Proton.Vector2D} targetPosition\n   * @property {Number} radius\n   * @property {Number} force\n   * @property {Number} radiusSq\n   * @property {Proton.Vector2D} attractionForce\n   * @property {Number} lengthSq\n   * @property {String} name The Behaviour name\n   */\n  constructor(targetPosition, force, radius, life, easing) {\n    super(life, easing);\n\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    this.name = \"Attraction\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Attraction\n   * @instance\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(targetPosition, force, radius, life, easing) {\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @memberof Proton#Proton.Attraction\n   * @method applyBehaviour\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    this.attractionForce.copy(this.targetPosition);\n    this.attractionForce.sub(particle.p);\n    this.lengthSq = this.attractionForce.lengthSq();\n\n    if (this.lengthSq > 0.00004 && this.lengthSq < this.radiusSq) {\n      this.attractionForce.normalize();\n      this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n      this.attractionForce.multiplyScalar(this.force);\n\n      particle.a.add(this.attractionForce);\n    }\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    particle.alpha =\n      particle.data.alphaB +\n      (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n","import MathUtil from \"../math/MathUtil\";\nimport Vector2D from \"../math/Vector2D\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nconst CHANGING = \"changing\";\n\nexport default class Cyclone extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Cyclone\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(angle, force, life, easing) {\n    super(life, easing);\n    this.setAngleAndForce(angle, force);\n    this.name = \"Cyclone\";\n  }\n\n  setAngleAndForce(angle, force) {\n    this.force = CHANGING;\n    this.angle = MathUtil.PI / 2;\n\n    if (angle === \"right\") {\n      this.angle = MathUtil.PI / 2;\n    } else if (angle === \"left\") {\n      this.angle = -MathUtil.PI / 2;\n    } else if (angle === \"random\") {\n      this.angle = \"random\";\n    } else if (angle instanceof Span) {\n      this.angle = \"span\";\n      this.span = angle;\n    } else if (angle) {\n      this.angle = angle;\n    }\n\n    if (\n      String(force).toLowerCase() === \"changing\" ||\n      String(force).toLowerCase() === \"chang\" ||\n      String(force).toLowerCase() === \"auto\"\n    ) {\n      this.force = CHANGING;\n    } else if (force) {\n      this.force = force;\n    }\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(angle, force, life, easing) {\n    this.angle = MathUtil.PI / 2;\n    this.setAngleAndForce(angle, force);\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    if (this.angle === \"random\") {\n      particle.data.cangle = MathUtil.randomAToB(-MathUtil.PI, MathUtil.PI);\n    } else if (this.angle === \"span\") {\n      particle.data.cangle = this.span.getValue();\n    }\n\n    particle.data.cyclone = new Vector2D(0, 0);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    let length;\n    let gradient = particle.v.getGradient();\n    if (this.angle === \"random\" || this.angle === \"span\") {\n      gradient += particle.data.cangle;\n    } else {\n      gradient += this.angle;\n    }\n\n    if (this.force === CHANGING) {\n      length = particle.v.length() / 100;\n    } else {\n      length = this.force;\n    }\n\n    particle.data.cyclone.x = length * Math.cos(gradient);\n    particle.data.cyclone.y = length * Math.sin(gradient);\n    particle.data.cyclone = this.normalizeForce(particle.data.cyclone);\n    particle.a.add(particle.data.cyclone);\n  }\n}\n","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n","import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n","import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      let behaviour = rest[i];\n      this.selfBehaviours.push(behaviour);\n      behaviour.initialize(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n","import Pool from \"../core/Pool\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n","import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n","import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n","import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.color = false;\n    this.setColor = false;\n    this.blendMode = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    if (this.blendMode) {\n      particle.body.blendMode = this.blendMode;\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n\n    if (this.setColor === true || this.color === true) {\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n    }\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n","import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n","import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n","import Proton from \"./core/Proton\";\nimport Particle from \"./core/Particle\";\nimport Pool from \"./core/Pool\";\n\nimport Util from \"./utils/Util\";\nimport ColorUtil from \"./utils/ColorUtil\";\nimport MathUtil from \"./math/MathUtil\";\nimport Vector2D from \"./math/Vector2D\";\nimport Polar2D from \"./math/Polar2D\";\nimport Mat3 from \"./math/Mat3\";\nimport Span from \"./math/Span\";\nimport ArraySpan from \"./math/ArraySpan\";\nimport Rectangle from \"./math/Rectangle\";\nimport ease from \"./math/ease\";\n\nimport Rate from \"./initialize/Rate\";\nimport Initialize from \"./initialize/Initialize\";\nimport Life from \"./initialize/Life\";\nimport Position from \"./initialize/Position\";\nimport Velocity from \"./initialize/Velocity\";\nimport Mass from \"./initialize/Mass\";\nimport Radius from \"./initialize/Radius\";\nimport Body from \"./initialize/Body\";\n\nimport Behaviour from \"./behaviour/Behaviour\";\nimport Force from \"./behaviour/Force\";\nimport Attraction from \"./behaviour/Attraction\";\nimport RandomDrift from \"./behaviour/RandomDrift\";\nimport Gravity from \"./behaviour/Gravity\";\nimport Collision from \"./behaviour/Collision\";\nimport CrossZone from \"./behaviour/CrossZone\";\nimport Alpha from \"./behaviour/Alpha\";\nimport Scale from \"./behaviour/Scale\";\nimport Rotate from \"./behaviour/Rotate\";\nimport Color from \"./behaviour/Color\";\nimport Cyclone from \"./behaviour/Cyclone\";\nimport Repulsion from \"./behaviour/Repulsion\";\nimport GravityWell from \"./behaviour/GravityWell\";\n\nimport Emitter from \"./emitter/Emitter\";\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\nimport FollowEmitter from \"./emitter/FollowEmitter\";\n\nimport CanvasRenderer from \"./render/CanvasRenderer\";\nimport DomRenderer from \"./render/DomRenderer\";\nimport EaselRenderer from \"./render/EaselRenderer\";\nimport PixelRenderer from \"./render/PixelRenderer\";\nimport PixiRenderer from \"./render/PixiRenderer\";\nimport WebGLRenderer from \"./render/WebGLRenderer\";\nimport CustomRenderer from \"./render/CustomRenderer\";\n\nimport Zone from \"./zone/Zone\";\nimport LineZone from \"./zone/LineZone\";\nimport CircleZone from \"./zone/CircleZone\";\nimport PointZone from \"./zone/PointZone\";\nimport RectZone from \"./zone/RectZone\";\nimport ImageZone from \"./zone/ImageZone\";\n\nimport Debug from \"./debug/Debug\";\n\n// namespace\nProton.Particle = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtil = MathUtil;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.Cyclone = Cyclone;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\nUtil.assign(Proton, ease);\n\n// export\nexport default Proton;\n","/**\n *  RAFManager requestAnimationFrame Manager\n * \n *  Simple package\n * \n *  CODE:\n * \n * \t\t// Add to\n *  \t-- RAFManager.add(func);\n * \n *   \t// Add and carry parameters\n *  \t-- const func = data =>{ console.log(data) };\n *  \t-- RAFManager.add(func, 25, { msg:'hello world!' }); \n * \t\t\n * \t\t// remove\n *  \t-- RAFManager.remove(func);\n *  \t-- RAFManager.stop();\t\n*/\n\n// simple polyfill by https://gist.github.com/paulirish/1579671\n(function () {\n\tlet lastTime = 0;\n\tlet vendors = ['ms', 'moz', 'webkit', 'o'];\n\tfor (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame']\n\t\t\t|| window[vendors[x] + 'CancelRequestAnimationFrame'];\n\t}\n}());\n\nconst RAFManager = {\n\ttimer: 0,\n\tstate: 'stop',\n\tanimations: [],\n\n\tadd(callback, fps = 60, param = null) {\n\t\tconst n = 60 / fps;\n\t\tconst aniData = { callback, fps, n, param, i: 0 };\n\t\tthis.animations.push(aniData);\n\t\tif (this.animations.length >= 1) this.start();\n\n\t\treturn this;\n\t},\n\n\tgetIndex(callback) {\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tif (aniData.callback === callback) return i;\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\tremove(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tif (index < 0) return;\n\n\t\tthis.deleteMap(callback);\n\t\tif (this.animations.length === 0) this.stop();\n\n\t\treturn this;\n\t},\n\n\tdeleteMap(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tconst aniData = this.animations[index];\n\t\tfor (let key in aniData) delete aniData[key];\n\n\t\tthis.animations.splice(index, 1);\n\t},\n\n\tstart() {\n\t\tif (this.state === 'start') return;\n\n\t\tthis.state = 'start';\n\t\tthis.tick();\n\t\treturn this;\n\t},\n\n\tstop() {\n\t\tif (this.state === 'stop') return;\n\n\t\tthis.state = 'stop';\n\t\tcancelAnimationFrame(this.timer);\n\t\treturn this;\n\t},\n\n\ttick() {\n\t\tthis.timer = requestAnimationFrame(() => { this.tick(); });\n\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tconst callback = aniData.callback;\n\t\t\tconst param = aniData.param;\n\n\t\t\taniData.i++;\n\t\t\tif (aniData.i >= aniData.n) {\n\t\t\t\tcallback(param);\n\t\t\t\taniData.i = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default RAFManager;","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\n\nclass MouseParticles extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.ease = 0.7;\n    this.level = 0;\n    this.LEVEL = 5;\n    this._allowEmitting = true;\n    this.renderProton = this.renderProton.bind(this);\n    this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n    this.mouseDownHandler = this.mouseDownHandler.bind(this);\n    this.mouseUpHandler = this.mouseUpHandler.bind(this);\n\n    this.createContainerDom();\n  }\n\n  createContainerDom() {\n    this.dom = document.createElement(\"div\");\n    this.dom.style.position = \"fixed\";\n    this.dom.style.left = \"0px\";\n    this.dom.style.top = \"0px\";\n    this.dom.style.zIndex = 9999;\n    this.dom.style.pointerEvents = \"none\";\n    this.dom.id = `mouse_ps_${(Math.random() * 999999) >> 0}`;\n    document.body.appendChild(this.dom);\n  }\n\n  componentWillUnmount() {\n    try {\n      document.body.removeEventListener(\"mousemove\", this.mouseMoveHandler, false);\n      document.body.removeEventListener(\"mousedown\", this.mouseDownHandler, false);\n      document.body.removeEventListener(\"mouseup\", this.mouseUpHandler, false);\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  componentDidMount() {\n    this.onCanvasInited();\n    this.addMouseEventListener();\n    this.setCullList();\n  }\n\n  onCanvasInited() {\n    this.createProton();\n    RAFManager.add(this.renderProton);\n  }\n\n  addMouseEventListener() {\n    document.body.addEventListener(\"mousemove\", this.mouseMoveHandler, false);\n    document.body.addEventListener(\"mousedown\", this.mouseDownHandler, false);\n    document.body.addEventListener(\"mouseup\", this.mouseUpHandler, false);\n  }\n\n  mouseDownHandler(e) {}\n  mouseUpHandler(e) {}\n\n  mouseMoveHandler(e) {\n    if (this.isCullDom(e)) return;\n    let x,\n      y = 0;\n\n    x = e.clientX;\n    y = e.clientY;\n\n    this.emitter.p.x += (x - this.emitter.p.x) * this.ease;\n    this.emitter.p.y += (y - this.emitter.p.y) * this.ease;\n\n    if (this._allowEmitting) this.emitter.emit(\"once\");\n  }\n\n  setCullList() {\n    this.cullClassList = this.props.cull || \"\";\n    this.cullClassList = this.cullClassList.split(\",\");\n\n    this.LEVEL = this.props.level || 6;\n  }\n\n  isCullDom(e) {\n    this.level = 0;\n\n    if (isInputText(e.target)) return true;\n    if (isTextBox(e.target)) return true;\n    if (!this.cullClassList || !this.cullClassList.length) return false;\n\n    return this.isContain(e.target, this.cullClassList);\n  }\n\n  isContain(element, cullClassList) {\n    if (this.level >= this.LEVEL) return false;\n    if (!element) return false;\n    if (!element.classList) return false;\n    if (element === document.body) return false;\n\n    for (let i = 0; i < cullClassList.length; i++) {\n      if (element.classList.contains(cullClassList[i])) {\n        return true;\n      }\n    }\n    this.level++;\n\n    return this.isContain(element.parentNode, cullClassList);\n  }\n\n  createProton(canvas) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num || 3);\n    emitter.damping = 0.008;\n\n    const life = this.props.life ? new Proton.Life(this.props.life) : new Proton.Life(0.2, 0.5);\n    const color = this.props.color || \"random\";\n    const g = this.props.g;\n    const v = this.props.v || 0.65;\n    const alpha = this.props.alpha || Proton.getSpan(0.25, 0.55);\n    const tha = this.props.tha ? new Proton.Span(this.props.tha[0], this.props.tha[1]) : new Proton.Span(0, 360);\n    let radius = new Proton.Radius(2, 5);\n    if (this.props.radius) {\n      const r = this.props.radius;\n      radius = new Proton.Radius(r * 0.8, r);\n    }\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(radius);\n    emitter.addInitialize(life);\n    emitter.addInitialize(new Proton.Velocity(new Proton.Span(v), tha, \"polar\"));\n\n    emitter.addBehaviour(new Proton.Alpha(alpha));\n    emitter.addBehaviour(new Proton.Color(color));\n    emitter.addBehaviour(new Proton.Scale(1, 0.1));\n    emitter.addBehaviour(new Proton.RandomDrift(10, 10, 0.2));\n    if (g) {\n      emitter.addBehaviour(new Proton.G(parseFloat(g)));\n    }\n\n    this.proton.addEmitter(emitter);\n    const renderer = new Proton.DomRenderer(this.dom);\n    this.proton.addRenderer(renderer);\n    this.emitter = emitter;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return <React.Fragment />;\n  }\n}\n\n// utils function\nfunction isInputText(element) {\n  return element instanceof HTMLInputElement && element.type === \"text\";\n}\n\nfunction isTextBox(element) {\n  let tagName = element.tagName.toLowerCase();\n  if (tagName === \"textarea\") return true;\n  if (tagName === \"input\") return true;\n\n  return false;\n}\n\nexport default MouseParticles;\n"],"names":["PI","MathUtil","PI_180","N180_PI","isInfinity","num","this","Infinity","a","b","Math","floor","random","center","f","isInt","randomAToB","toString","slice","randomZone","k","digits","pow","toColor16","i","o","t","constructor","value","enumerable","writable","configurable","Span","isArray","Util","getRandFromArray","randomFloating","c","pan","getValue","initValue","length","d","tx","ty","y","angleInRadians","cos","s","sin","p","sx","sy","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","createCanvas","id","width","height","position","dom","document","createElement","style","opacity","transform","resize","marginLeft","marginTop","div","x","scale","rotate","willChange","css3","key","val","bkey","charAt","toUpperCase","substr","imgsCache","canvasCache","canvasId","_","context","image","rect","drawImage","imagedata","getImageData","clearRect","img","callback","param","src","Image","onload","g","e","target","canvas","WebGLUtil","DomUtil","getContext","defaults","Object","prototype","call","arr","toArray","emptyObject","obj","ignore","indexOf","args","bind","apply","concat","particle","conf","hasProp","v","copy","props","prop","hasOwnProperty","getSpanValue","ImgUtil","destroy","assign","source","idsMap","Puid","_index","_cache","type","uid","getIdFromCache","isBody","isInner","Pool","params","__puid","getId","cache","pop","createOrClone","getCache","push","total","create","classApply","clone","count","Stats","body","add","emitter","getEmitter","renderer","getRenderer","str","proton","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","pool","container","innerHTML","cssText","join","addEventListener","_this","bg","color","r","parentNode","appendChild","emitterIndex","renderers","rendererIndex","result","cpool","round","EventDispatcher","listener","_listeners","removeEventListener","splice","listeners","handler","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","particles","time","damping","eulerIntegrate","sleep","old","multiplyScalar","mass","clear","Proton","render","init","index","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","_fps","PROTON_UPDATE","USE_CLOCK","then","Date","getTime","now","elapsed","amendChangeTabsBug","emittersUpdate","DEFAULT_INTERVAL","PROTON_UPDATE_AFTER","_interval","update","destroyAll","destroyOther","getAllParticles","set","fps","get","integrationType","stats","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","C","Rgb","L","easeLinear","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInSine","PI_2","easeInExpo","easeOutExpo","sqrt","easeOutCirc","easeInOutCirc","easeInBack","easeOutBack","easeInOutBack","getEasing","ease","Vector2D","atan2","w","addVectors","subVectors","divideScalar","distanceToSquared","tha","dx","dy","alpha","Particle","life","age","dead","sprite","energy","radius","rotation","easing","rgb","reset","data","removeAllBehaviours","applyBehaviours","max","applyBehaviour","behaviour","parents","initialize","addBehaviour","P","emptyArray","N","setProp","hexToRgb","h","hex16","substring","parseInt","rgbToHex","rbg","Number","Polar2D","getX","getY","abs","Mat3","mat3","mat","Float32Array","mat1","mat2","m","vec","ArraySpan","_arr","randomColor","W","Rectangle","right","bottom","Rate","startTime","nextTime","timePan","numPan","J","numpan","timepan","setSpanValue","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","error","st","Position","zone","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","Mass","massPan","Radius","oldRadius","Body","imageTarget","inner","Behaviour","force","removeBehaviour","mt","Force","fx","fy","normalizeForce","calculate","Attraction","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Et","Gravity","Collision","collisionPool","delta","overlap","totalMass","averageMass1","averageMass2","distance","newPool","otherParticle","n","CrossZone","crossing","Alpha","same","alphaA","alphaB","It","Scale","scaleA","scaleB","Rotate","rotationA","rotationB","getDirection","influence","Color","createArraySpan","colorA","ColorUtil","colorB","CHANGING","Cyclone","angle","span","String","toLowerCase","setAngleAndForce","cangle","cyclone","gradient","getGradient","Repulsion","Ht","GravityWell","centerPoint","distanceVec","factor","distanceSq","bindEmitter","setVectorVal","degreeTransform","Emitter","totalTime","stoped","emitTime","isNaN","rate","oldStoped","oldEmitTime","oldTotalTime","initAll","rest","initializer","arguments","emitting","integrate","dispatch","expire","event","bindEvent","createParticle","setupParticle","addBehaviours","stop","removeAllInitializers","removeEmitter","BehaviourEmitter","selfBehaviours","FollowEmitter","mousemoveHandler","_this2","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","layerY","offsetX","offsetY","babelHelpers.get","Jt","window","initEventHandler","BaseRenderer","thinkness","stroke","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","onParticleCreated","_particleUpdateHandler","onParticleUpdate","_particleDeadHandler","onParticleDead","te","element","circleConf","isCircle","initHandler","CanvasRenderer","addImg2Body","drawCircle","bufContext","buffer","createBuffer","globalAlpha","globalCompositeOperation","fillStyle","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","size","bufferCache","DomRenderer","bodyReady","transform3d","backgroundColor","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","createBody","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","PIXIClass","PixiRenderer","PIXI","Sprite","createFromImage","from","fromImage","blendMode","setColor","tint","getHex16FromParticle","anchor","endFill","setPIXI","MStack","mats","multiply","ye","WebGLRenderer","gl","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","CustomRenderer","umat","smat","mstack","viewport","circleCanvasURL","texturebuffers","A","B","fs","VERTEX_SHADER","shader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","angel","rotationMatrix","scaleMatrix","matrix","inverse","LineZone","x1","y1","dot","xxyy","tha2","oldx","oldy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","ge","x2","y2","min","getLength","CircleZone","PIx2","randomRadius","distanceTo","RectZone","ImageZone","vectors","setVectors","j","length1","length2","getBound","negate","func","getStyle","moveTo","lineTo","drawRect","Vector","Polar","getSpan","Init","V","M","R","F","RD","G","S","WebGlRenderer","Debug","vendors","requestAnimationFrame","cancelAnimationFrame","timer","state","animations","aniData","start","getIndex","deleteMap","tick","MouseParticles","level","LEVEL","renderProton","mouseMoveHandler","mouseDownHandler","mouseUpHandler","createContainerDom","left","zIndex","pointerEvents","onCanvasInited","addMouseEventListener","setCullList","createProton","isCullDom","clientX","clientY","emit","cullClassList","cull","split","HTMLInputElement","tagName","isTextBox","isContain","classList","contains","addInitialize","parseFloat","addEmitter","addRenderer","React"],"sourceRoot":""}